{"version":3,"file":"grid-even/style-index.css","mappings":";;;AAAA;;;;;EAAA;ACAA;;;;;CAAA;ACAA;;;;;CAAA;ACAA;;;;;CAAA;AAWA;AACA;2DAAA;AASA;AACA;2DAAA;AAeA;AACA;4DAAA;AAwBA;AACA;2DAAA;AAgBA;AACA;2DAAA;AA8DA;AACA;kEAAA;AAuCA;AACA;kEAAA;AAcA;AACA;2DAAA;AAkCA;AACA;2DAAA;AAyCA;AACA;2DAAA;AAgBA;AACA;2DAAA;AAeA;AACA;2DAAA;AAUA;AACA;2DAAA;AAYA;AACA;2DAAA;AAcA;AACA;2DAAA;AAUA;AACA;2DAAA;AAiBA;AACA;2DAAA;ACxXA;;;;;CAAA;AJWA;EACC;EACA;EACA;EACA;EACA;AAuED;AC/BM;EDpCH;IACC;IACA;EAsEF;AACF;ACrCM;EDpCH;IACC;IACA;EA4EF;AACF;AC3CM;EDpCH;IACC;IACA;EAkFF;AACF;ACjDM;EDpCH;IACC;IACA;EAwFF;AACF;ACvDM;EDpCH;IACC;IACA;EA8FF;AACF;AC7DM;EDpCH;IACC;IACA;EAoGF;AACF,C","sources":["webpack://my-custom-blocks/./src/grid-even/style.scss","webpack://my-custom-blocks/./src/scss/abstracts/_mixins.scss","webpack://my-custom-blocks/./src/scss/abstracts/_functions.scss","webpack://my-custom-blocks/./src/scss/abstracts/_variables.scss","webpack://my-custom-blocks/./src/scss/abstracts/_utilities.scss"],"sourcesContent":["/**\n * The following styles get applied both on the front of your site\n * and in the editor.\n *\n * Replace them with your own styles or remove the file completely.\n */\n\n@use \"../scss/abstracts/\" as *;\n@use \"sass:map\";\n$grid-breakpoints-without-xs: map.remove($grid-breakpoints, \"xs\");\n\n.wp-block-cb-grid-even {\n\t--col: 1;\n\t--gap: 16px;\n\tdisplay: grid;\n\tgap: var(--gap);\n\tgrid-template-columns: repeat(var(--col), 1fr);\n\n\t@each $bp in map.keys($grid-breakpoints-without-xs) {\n\t\t@include mq($bp) {\n\t\t\t&--#{$bp} {\n\t\t\t\tgrid-template-columns: repeat(var(--col-#{$bp}, var(--col)), 1fr);\n\t\t\t\tgap: var(--gap-#{$bp}, var(--gap));\n\t\t\t}\n\t\t}\n\t}\n}\n","/* \nThis file contains SCSS mixins sourced from the Bootstrap framework.\nSource: https://github.com/twbs/bootstrap/tree/main/scss/mixins\nThese mixins are used in accordance with Bootstrap's open-source license (MIT).\nModifications may have been made to the original mixins.\n*/\n@use 'sass:meta';\n@use 'sass:math';\n@use 'sass:map';\n@use 'sass:list';\n@use 'sass:string';\n@use 'sass:selector';\n@use 'functions' as *;\n@use 'variables' as *;\n\n@mixin transition($transition...) {\n  @if list.length($transition) == 0 {\n    $transition: $transition-base;\n  }\n\n  @if list.length($transition) > 1 {\n    @each $value in $transition {\n      @if $value == null or $value == none {\n        @warn \"The keyword 'none' or 'null' must be used as a single argument.\";\n      }\n    }\n  }\n\n  @if $enable-transitions {\n    @if list.nth($transition, 1) != null {\n      transition: $transition;\n    }\n\n    @if $enable-reduced-motion and\n      list.nth($transition, 1) !=\n      null and\n      list.nth($transition, 1) !=\n      none\n    {\n      @media (prefers-reduced-motion: reduce) {\n        transition: none;\n      }\n    }\n  }\n}\n\n// media query\n@mixin mq($breakpoint, $has-media-hover: false) {\n  @if map.has-key($grid-breakpoints, $breakpoint) and $breakpoint != 'xs' {\n    $breakpoint: map.get($grid-breakpoints, $breakpoint);\n\n    @if ($has-media-hover) {\n      @media screen and (min-width: $breakpoint) and (hover: hover) and (pointer: fine) {\n        @content;\n      }\n    } @else {\n      @media screen and (min-width: $breakpoint) {\n        @content;\n      }\n    }\n  } @else {\n    @error 'the keyword #{$breakpoint} is not in the $breakpoints map';\n  }\n}\n\n// Mixin: Media query for hover-capable devices at a specific breakpoint\n// - Includes (hover: hover) and (pointer: fine) for precision\n// - Falls back to a regular media query if $has-media-hover is false\n// - Throws an error if the breakpoint is not defined in $grid-breakpoints\n@mixin mq-hover-device($breakpoint) {\n  @include mq($breakpoint, true);\n}\n\n@mixin respond-min($breakpoint) {\n  @media (min-width: #{$breakpoint}px) {\n    @content;\n  }\n}\n\n@mixin make-container($gutter: $container-padding) {\n  width: 100%;\n  padding-inline: if(\n    $gutter == 'responsive',\n    var(--container-padding-res),\n    $gutter\n  );\n  margin-inline: auto;\n}\n\n@mixin make-container-fluid-max($max-width, $gutter: $container-padding) {\n  max-width: $max-width;\n  padding-inline: if(\n    $gutter == 'responsive',\n    var(--container-padding-res),\n    $gutter\n  );\n  margin-inline: auto;\n}\n\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n\n  // @debug min $min;\n  @if $min {\n    @media screen and (min-width: $min) {\n      // @debug in media $min;\n\n      @content;\n    }\n  } @else {\n    // @debug kein media;\n\n    @content;\n  }\n}\n\n// Bootstrap grid system\n@mixin row-cols($count) {\n  > * {\n    flex: 0 0 auto;\n    width: math.percentage(math.div(1, $count));\n  }\n}\n\n@mixin make-row($gutter: $grid-gutter-width) {\n  --#{$bs-prefix}gutter-x: #{$gutter};\n  --#{$bs-prefix}gutter-y: 0;\n  display: flex;\n  flex-wrap: wrap;\n  margin-top: calc(-1 * var(--#{$bs-prefix}gutter-y));\n  margin-right: calc(-0.5 * var(--#{$bs-prefix}gutter-x));\n  margin-left: calc(-0.5 * var(--#{$bs-prefix}gutter-x));\n}\n\n@mixin make-col-ready() {\n  // Add box sizing if only the grid is loaded\n  box-sizing: if(\n    meta.variable-exists(include-column-box-sizing) and\n      $include-column-box-sizing,\n    border-box,\n    null\n  );\n  // Prevent columns from becoming too narrow when at smaller grid tiers by\n  // always setting `width: 100%;`. This works because we set the width\n  // later on to override this initial width.\n  flex-shrink: 0;\n  width: 100%;\n  max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid\n  padding-right: calc(\n    var(--#{$bs-prefix}gutter-x) * 0.5\n  ); // stylelint-disable-line function-disallowed-list\n  padding-left: calc(\n    var(--#{$bs-prefix}gutter-x) * 0.5\n  ); // stylelint-disable-line function-disallowed-list\n  margin-top: var(--#{$bs-prefix}gutter-y);\n}\n\n@mixin make-col($size: false, $columns: $grid-columns) {\n  @if $size {\n    flex: 0 0 auto;\n    width: math.percentage(math.div($size, $columns));\n  } @else {\n    flex: 1 1 0;\n    max-width: 100%;\n  }\n}\n\n@mixin make-col-auto() {\n  flex: 0 0 auto;\n  width: auto;\n}\n\n@mixin make-col-offset($size, $columns: $grid-columns) {\n  $num: math.div($size, $columns);\n  margin-left: if($num == 0, 0, math.percentage($num));\n}\n\n@mixin make-grid-columns(\n  $columns: $grid-columns,\n  $gutter: $grid-gutter-width,\n  $breakpoints: $grid-breakpoints\n) {\n  @each $breakpoint in map.keys($breakpoints) {\n    $infix: breakpoint-infix($breakpoint, $breakpoints);\n\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      // Provide basic `.col-{bp}` classes for equal-width flexbox columns\n      .col#{$infix} {\n        flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4\n      }\n\n      .row-cols#{$infix}-auto > * {\n        @include make-col-auto();\n      }\n\n      @if $grid-row-columns > 0 {\n        @for $i from 1 through $grid-row-columns {\n          .row-cols#{$infix}-#{$i} {\n            @include row-cols($i);\n          }\n        }\n      }\n\n      .col#{$infix}-auto {\n        @include make-col-auto();\n      }\n\n      @if $columns > 0 {\n        @for $i from 1 through $columns {\n          .col#{$infix}-#{$i} {\n            @include make-col($i, $columns);\n          }\n        }\n\n        // `$columns - 1` because offsetting by the width of an entire row isn't possible\n        @for $i from 0 through ($columns - 1) {\n          @if not($infix == '' and $i == 0) {\n            // Avoid emitting useless .offset-0\n            .offset#{$infix}-#{$i} {\n              @include make-col-offset($i, $columns);\n            }\n          }\n        }\n      }\n\n      // Gutters\n      //\n      // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.\n      @if ($enable-gutters) {\n        @each $key, $value in $sizes-regular {\n          .g#{$infix}-#{$key},\n          .gx#{$infix}-#{$key} {\n            --#{$bs-prefix}gutter-x: #{$value};\n          }\n\n          .g#{$infix}-#{$key},\n          .gy#{$infix}-#{$key} {\n            --#{$bs-prefix}gutter-y: #{$value};\n          }\n        }\n      }\n    }\n  }\n}\n\n@mixin make-cssgrid($columns: $grid-columns, $breakpoints: $grid-breakpoints) {\n  @each $breakpoint in map-keys($breakpoints) {\n    $infix: breakpoint-infix($breakpoint, $breakpoints);\n\n    @include media-breakpoint-up($breakpoint, $breakpoints) {\n      @if $columns > 0 {\n        @for $i from 1 through $columns {\n          .g-col#{$infix}-#{$i} {\n            grid-column: auto / span $i;\n          }\n        }\n\n        // Start with `1` because `0` is an invalid value.\n        // Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible.\n        @for $i from 1 through ($columns - 1) {\n          .g-start#{$infix}-#{$i} {\n            grid-column-start: $i;\n          }\n        }\n      }\n    }\n  }\n}\n\n@mixin generate-utility(\n  $utility,\n  $infix: '',\n  $key,\n  $is-rfs-media-query: false\n) {\n  $values: map.get($utility, values);\n  $selected-function: if(\n    map.has-key($utility, function),\n    map.get($utility, function),\n    'normal'\n  );\n\n  // Check if the list is not empty before accessing the first element\n  @if list.length($values) > 0 and $values != null {\n    // If the values are a list or string, convert it into a map\n    @if meta.type-of($values) ==\n      'string' or\n      meta.type-of(list.nth($values, 1)) !=\n      'list'\n    {\n      $values: list.zip($values, $values);\n    }\n  }\n\n  // @debug values $values;\n  // @debug meta.type-of($values);\n\n  $is-important: if(map.get($utility, important), !important, null);\n\n  $required-property: if(\n    map.has-key($utility, required-property),\n    map.get($utility, required-property),\n    null\n  );\n  $properties: map.get($utility, property);\n  $custom-property-value: if(\n    map.has-key($utility, custom-property-value),\n    map.get($utility, custom-property-value),\n    null\n  );\n\n  // @debug $custom-property-value;\n  $class: map.get($utility, class);\n\n  // Multiple properties are possible, for example with vertical or horizontal margins or paddings\n  // @debug properties before $properties;\n\n  @if meta.type-of($properties) == 'string' {\n    $properties: list.append((), $properties);\n\n    // @debug properties inside $properties;\n  }\n\n  // @debug properties after $properties;\n\n  $local-vars: map.get($utility, local-vars);\n  $is-rtl: map.get($utility, rtl);\n  $custom-property-name: map.get($utility, custom-property-name);\n  $nested-selectors: if(\n    map.has-key($utility, complex-selectors),\n    map.get($utility, complex-selectors),\n    null\n  );\n  $complex-selectors: if(\n    map.has-key($utility, complex-selectors),\n    map.get($utility, complex-selectors),\n    null\n  );\n  $state: map.get($utility, state);\n  $custom-property-prefix: map.get($utility, custom-property-prefix);\n  $css-variable-name: map.get($utility, css-variable-name);\n  $media: map.get($utility, media);\n\n  $configuration-map: (\n    properties: $properties,\n    values: $values,\n    important: $is-important,\n    required-property: $required-property,\n    breakpoint-infix: $infix,\n    class: $class,\n    key: $key,\n    custom-property-name: $custom-property-name,\n    custom-property-value: $custom-property-value,\n    custom-property-prefix: $custom-property-prefix,\n    css-variable-name: $css-variable-name,\n    local-vars: $local-vars,\n    is-rtl: $is-rtl,\n    nested-selectors: $nested-selectors,\n    state: $state,\n    media: $media,\n  );\n\n  @if $selected-function == 'normal' {\n    @include create-normal-utility($configuration-map);\n  }\n\n  @if $selected-function == 'fluid' {\n    @include create-fluid-utility($configuration-map);\n  }\n\n  @if $selected-function == 'custom-property-value' {\n    @include create-custom-property-value-utility($configuration-map);\n  }\n\n  @if $selected-function == 'property-advanced' {\n    @include create-property-advanced-utility($configuration-map);\n  }\n\n  @if $selected-function == 'nested-rules' {\n    @include create-nested-rules-utility($configuration-map);\n  }\n\n  @if $selected-function == 'simple-custom-property' {\n    @include create-simple-custom-property-utility($configuration-map);\n  }\n\n  @if $selected-function == 'css-var' {\n    @include create-css-var-utility($configuration-map);\n  }\n}\n\n@mixin create-normal-utility($map) {\n  $properties: map.get($map, properties);\n  $key: map.get($map, key);\n  $values: map.get($map, values);\n  $important: map.get($map, important);\n  $breakpoint-infix: map.get($map, breakpoint-infix);\n  $class: if(map.get($map, class) != null, map.get($map, class), $key);\n  $local-vars: map.get($map, local-vars);\n  $states: map.get($map, state);\n  $states-length: if($states, list.length($states), null);\n  $states: if($states-length == 1, to-list($states), $states);\n  $css-var: map.get($map, css-var);\n  $css-variable-name: map.get($map, css-variable-name);\n  $required-property: map.get($map, required-property);\n  $media: map.get($map, media);\n\n  // @debug -------normal-utility---------------;\n  // @debug media $media;\n\n  // @debug properties $properties;\n  // @debug values $values;\n  // @debug required-property $required-property;\n  // @debug inportant $important;\n  // @debug breakpoint-infix $breakpoint-infix;\n  // @debug key $key;\n  // @debug class $class;\n  // @debug state $states;\n  // @debug meta-state meta.type-of($states);\n  // @debug state-length $states-length;\n  // @debug local-vars $local-vars;\n  // @debug css-var $css-var;\n  // @debug css-variable-name $css-variable-name;\n  // @debug --------------------------;\n\n  @if ($values != null) {\n    @if ($states and $states-length > 1) {\n      // @debug more than one state;\n      @each $state in $states {\n        @each $key, $value in $values {\n          $key-suffix: null-safe-suffix($key);\n\n          .#{$prefix-class}#{$class}#{$breakpoint-infix}#{$key-suffix}#{$state} {\n            @if $local-vars {\n              @each $local-var, $value in $local-vars {\n                --#{$local-var}: #{$value};\n              }\n            }\n\n            @if $required-property != null {\n              @each $prop, $value in $required-property {\n                #{$prop}: $value #{$important};\n              }\n            }\n\n            @each $property in $properties {\n              // @debug property $property;\n              #{$property}: $value #{$important};\n            }\n          }\n        }\n      }\n    } @else {\n      // @debug no state;\n\n      @each $key, $value in $values {\n        $key-suffix: null-safe-suffix($key);\n        $single-state: single-or-null($states);\n\n        // @debug single-state $single-state;\n        .#{$prefix-class}#{$class}#{$breakpoint-infix}#{$key-suffix}#{$single-state} {\n          @if $local-vars {\n            @each $local-var, $value in $local-vars {\n              --#{$local-var}: #{$value};\n            }\n          }\n\n          @if $required-property != null {\n            @each $prop, $value in $required-property {\n              #{$prop}: $value #{$important};\n            }\n          }\n\n          @each $property in $properties {\n            @if $media {\n              @media #{$media} {\n                #{$property}: $value #{$important};\n              }\n            } @else {\n              #{$property}: $value #{$important};\n            }\n          }\n        }\n      }\n    }\n  }\n}\n\n@mixin create-fluid-utility($map) {\n  $property: map.get($map, properties);\n  $values: map.get($map, values);\n  $important: map.get($map, important);\n  $breakpoint-infix: map.get($map, breakpoint-infix);\n  $class: map.get($map, class);\n\n  $fluid-map: $values;\n\n  // @debug -------- fluid ----------------;\n  // @debug property $property;\n  // @debug type-of property meta.type-of($property);\n  // @debug property string #{$property};\n  // @debug #{$property} == $property;\n  // @debug font-size #{$property} == 'font-size';\n  // @debug values $values;\n  // @debug important $important;\n  // @debug breakpoint-infix $breakpoint-infix;\n  // @debug class $class;\n  // @debug -------------------------;\n\n  @if ($values != null) {\n    // Loop through each key in the map\n    @each $key in map.keys($fluid-map) {\n      $map: map.get($fluid-map, $key);\n      // @debug map $map;\n      $selector-suffix: remove-prefix($key, 'fs-');\n\n      // @debug selector-suffix $selector-suffix;\n      $custom-property-name: $key;\n\n      // @debug remove-prefix remove-prefix($key, 'fs-');\n\n      $use-custom-property: if(\n        map.has-key($map, create-custom-property),\n        map.get($map, create-custom-property),\n        true\n      );\n\n      // @debug use $use-custom-property;\n      // @debug custom-property-name $custom-property-name;\n      // @debug use-custom-property $use-custom-property;\n\n      $threshold-map: map.get($map, threshold);\n\n      // Get keys (the viewports)\n      $viewports: map.keys($threshold-map);\n\n      $min-viewport: list.nth($viewports, 1);\n      $max-viewport: list.nth($viewports, 2);\n\n      // @debug min-viewport $min-viewport;\n      // @debug max-viewport $max-viewport;\n\n      // Get sizes\n      $min-size: map.get($threshold-map, $min-viewport);\n      $max-size: map.get($threshold-map, $max-viewport);\n\n      // @debug min-size $min-size;\n      // @debug max-size $max-size;\n\n      $threshold-unit: if(\n        map.has-key($map, threshold-unit),\n        map.get($map, threshold-unit),\n        if(#{$property} == 'font-size', 'rem', 'px')\n      );\n      $preferred-unit: if(\n        map.has-key($map, preferred-unit),\n        map.get($map, preferred-unit),\n        'rem'\n      );\n      $relative-to: if(\n        map.has-key($map, relative-to),\n        map.get($map, relative-to),\n        'viewport'\n      );\n\n      // @debug min-vp $min-viewport;\n      // @debug max-vp $max-viewport;\n      // @debug min-size $min-size;\n      // @debug max-size $max-size;\n      // @debug threshold-unit $threshold-unit;\n      // @debug preferred-unit $preferred-unit;\n      // @debug relative-to $relative-to;\n\n      @if ($use-custom-property) {\n        // @debug inside;\n        .#{$prefix-class}#{$class}#{$breakpoint-infix}-#{$selector-suffix} {\n          @each $prop in $property {\n            #{$prop}: var(--#{$prefix}#{$custom-property-name}) #{$important};\n          }\n        }\n      } @else {\n        .#{$prefix-class}#{$class}#{$breakpoint-infix}-#{$selector-suffix} {\n          @each $prop in $property {\n            #{$prop}: fluid(\n                $min-size,\n                $max-size,\n                $min-viewport,\n                $max-viewport,\n                $threshold-unit,\n                $preferred-unit,\n                $relative-to\n              )\n              #{$important};\n          }\n        }\n      }\n    }\n  }\n}\n\n@mixin create-custom-property-value-utility($map) {\n  $properties: map.get($map, properties);\n  $values: map.get($map, values);\n  $custom-property-trunks: if($values, map.keys($values), 'null');\n  $custom-property-prefix: map.get($map, custom-property-prefix);\n  $required-property: map.get($map, required-property);\n  $formatted-prefix: add-hyphen($custom-property-prefix);\n\n  $important: map.get($map, important);\n  $breakpoint-infix: map.get($map, breakpoint-infix);\n  $class: map.get($map, class);\n  $local-vars: map.get($map, local-vars);\n  $state: if(map.get($map, state), to-list(map.get($map, state)), null);\n\n  // @debug properties $properties;\n  // @debug values $values;\n  // @debug required-property $required-property;\n  // @debug prefix $custom-property-prefix;\n  // @debug formatted-prefix $formatted-prefix;\n\n  // @debug trunks $custom-property-trunks;\n\n  // @debug important $important;\n  // @debug breakpoint-infix $breakpoint-infix;\n  // @debug class $class;\n  // @debug state $state;\n\n  // @debug breakpoint-infix $breakpoint-infix;\n  // @debug local-vars $local-vars;\n\n  @if ($values != null) {\n    @if ($formatted-prefix != null) {\n      @each $trunk in $custom-property-trunks {\n        .#{$prefix-class}#{$class}#{$breakpoint-infix}-#{$trunk}#{$state} {\n          @if ($required-property != null) {\n            @each $prop, $value in $required-property {\n              #{$prop}: $value #{$important};\n            }\n          }\n          @each $prop in $properties {\n            #{$prop}: var(--#{$prefix}#{$formatted-prefix}#{$trunk})\n              #{$important};\n          }\n        }\n      }\n    } @else {\n      @each $trunk, $value in $values {\n        $formatted-trunk: add-hyphen(#{$trunk}, prepend);\n        .#{$prefix-class}#{$class}#{$breakpoint-infix}#{$formatted-trunk}#{$state} {\n          @if ($required-property != null) {\n            @each $prop, $value in $required-property {\n              #{$prop}: $value #{$important};\n            }\n          }\n          @each $prop in $properties {\n            #{$prop}: $value #{$important};\n          }\n        }\n      }\n    }\n  }\n}\n\n@mixin create-property-advanced-utility($map) {\n  $properties: map.get($map, properties);\n  $values: map.get($map, values);\n  $important: map.get($map, important);\n  $breakpoint-infix: map.get($map, breakpoint-infix);\n  $class: map.get($map, class);\n  $local-vars: map.get($map, local-vars);\n  $states: map.get($map, state);\n  $states-length: if($states, list.length($states), null);\n  $states: if($states-length == 1, to-list($states), $states);\n  // @debug properties $properties;\n  // @debug important $important;\n  // @debug breakpoint-infix $breakpoint-infix;\n  // @debug class $class;\n  // @debug state $states;\n  // @debug state-length $states-length;\n  // @debug meta-state meta.type-of($states);\n  // @debug local-vars $local-vars;\n  // @debug join list.join($states, (), comma);\n\n  @if ($states and $states-length > 1) {\n    $formatted-states: list.join($states, (), comma);\n\n    .#{$prefix-class}#{$class}#{$breakpoint-infix}:where(#{$formatted-states}) {\n      @each $prop, $value in $properties {\n        #{$prop}: $value #{$important};\n      }\n    }\n  } @else {\n    // Get single state from $states list, returns null if unset\n    $single-state: single-or-null($states);\n\n    .#{$prefix-class}#{$class}#{$breakpoint-infix}#{$single-state} {\n      @each $prop, $value in $properties {\n        #{$prop}: $value #{$important};\n      }\n    }\n  }\n}\n\n@mixin create-nested-rules-utility($map) {\n  $properties: map.get($map, properties);\n  $values: map.get($map, values);\n  $important: map.get($map, important);\n  $breakpoint-infix: map.get($map, breakpoint-infix);\n  $class: map.get($map, class);\n\n  // @debug properties $properties;\n  // @debug important $important;\n  // @debug breakpoint-infix $breakpoint-infix;\n  // @debug class $class;\n\n  .#{$class} {\n    // Loop through the properties defined for each utility\n    @each $property, $value in $properties {\n      @if meta.type-of($value) == 'map' {\n        $_nested-selector: $property;\n\n        #{$_nested-selector} {\n          @each $nested-property, $nested-value in $value {\n            $formatted_value: if($nested-value == '', '\"\"', $nested-value);\n            #{$nested-property}: #{$formatted_value};\n          }\n        }\n      } @else {\n        #{$property}: #{$value};\n      }\n    }\n  }\n}\n\n@mixin create-css-var-utility($map) {\n  $properties: map.get($map, properties);\n  $key: map.get($map, key);\n  $values: map.get($map, values);\n  $important: map.get($map, important);\n  $breakpoint-infix: map.get($map, breakpoint-infix);\n  $class: if(map.get($map, class) != null, map.get($map, class), $key);\n  $local-vars: map.get($map, local-vars);\n  $states: map.get($map, state);\n  $states-length: if($states, list.length($states), null);\n  $states: if($states-length == 1, to-list($states), $states);\n  $css-variable-name: map.get($map, css-variable-name);\n  $custom-property-trunks: if($values, map.keys($values), 'null');\n  $custom-property-prefix: map.get($map, custom-property-prefix);\n\n  // @debug --------------------------;\n  // @debug properties $properties;\n  // @debug custom-property-trunks $custom-property-trunks;\n  // @debug custom-property-prefix $custom-property-prefix;\n  // @debug values $values;\n  // @debug inportant $important;\n  // @debug breakpoint-infix $breakpoint-infix;\n  // @debug key $key;\n  // @debug class $class;\n  // @debug state $states;\n  // @debug meta-state meta.type-of($states);\n  // @debug state-length $states-length;\n  // @debug local-vars $local-vars;\n  // @debug css-variable-name $css-variable-name;\n  // @debug --------------------------;\n\n  @if ($values != null) {\n    @if ($states and $states-length > 1) {\n      // @debug more than one state;\n      @each $state in $states {\n        @each $key, $value in $values {\n          $key-suffix: null-safe-suffix($key);\n          // @debug key-suffix $key-suffix;\n\n          @if ($custom-property-prefix) {\n            .#{$prefix-class}#{$class}#{$breakpoint-infix}#{$key-suffix}#{$state} {\n              --#{$css-variable-name}: var(\n                --#{$prefix}#{$custom-property-prefix}#{$key-suffix}\n              );\n            }\n          } @else {\n            .#{$prefix-class}#{$class}#{$breakpoint-infix}#{$key-suffix}#{$state} {\n              --#{$css-variable-name}: #{$value};\n            }\n          }\n        }\n      }\n    } @else {\n      @each $key, $value in $values {\n        $key-suffix: null-safe-suffix($key);\n        // @debug key $key;\n        // @debug key-suffix $key-suffix;\n        $single-state: single-or-null($states);\n        // @debug $single-state;\n        @if ($custom-property-prefix) {\n          .#{$prefix-class}#{$class}#{$breakpoint-infix}#{$key-suffix}#{$single-state} {\n            --#{$css-variable-name}: var(\n              --#{$prefix}#{$custom-property-prefix}#{$key}#{$single-state}\n            );\n          }\n        } @else {\n          // @debug single-state $single-state;\n          .#{$prefix-class}#{$class}#{$breakpoint-infix}#{$key-suffix}#{$single-state} {\n            --#{$css-variable-name}: #{$value};\n          }\n        }\n      }\n    }\n  }\n}\n\n@mixin create-simple-custom-property-utility($map) {\n  // @debug map $map;\n  // @debug keys map.keys($map);\n  // @debug HEER $map;\n\n  $map: map.get($map, values);\n\n  @if $map != null {\n    @if list.length(map.keys($map)) > 0 {\n      @each $key, $value-map in $map {\n        // @debug key $key;\n        // @debug value-map $value-map;\n\n        $_class: if(\n          map.has-key($value-map, class),\n          map.get($value-map, class),\n          $key\n        );\n        $_property: map.get($value-map, property);\n\n        @if ($_property) {\n          .#{$_class} {\n            #{$_property}: var(--#{$prefix}#{$key});\n          }\n        }\n      }\n    }\n  }\n}\n\n@mixin generate-responsive-custom-properties($map, $local-prefix: '') {\n  // @debug map $map;\n  // @debug bps map.keys($map);\n  $_prefix: if(string.length($local-prefix) > 0, $local-prefix + '-', '');\n\n  @each $breakpoint in map.keys($map) {\n    // @debug bp $breakpoint;\n\n    @include media-breakpoint-up($breakpoint) {\n      // @debug inside media-bp-up $breakpoint;\n\n      @if ($breakpoint == 'xs') {\n        // @debug map map.get($map, $breakpoint);\n        @each $custom-property-name, $value-object in map.get($map, $breakpoint)\n        {\n          // @debug custom-property-name $custom-property-name;\n          // @debug value-object $value-object;\n          // @debug ----------;\n          --#{$prefix}#{$_prefix}#{$custom-property-name}: #{map.get(\n              $value-object,\n              value\n            )};\n        }\n      } @else {\n        @each $custom-property-name, $value in map.get($map, $breakpoint) {\n          // @debug in else;\n          // @debug custom-property-name $custom-property-name;\n          // @debug value $value;\n\n          // @debug ----------;\n\n          & {\n            --#{$prefix}#{$_prefix}#{$custom-property-name}: #{$value};\n          }\n        }\n      }\n    }\n  }\n}\n\n@mixin generate-custom-properties($map: (), $local-prefix: '') {\n  @if $map != null {\n    @if map.has-key($map, custom-property-prefix) {\n      $_name: map.get($map, custom-property-prefix);\n      $_map: map.get($map, values);\n      // @debug map 1 $_map;\n\n      // convert to a map if $_map is a list\n      $_map: if(meta.type-of($_map) == list, list.zip($_map, $_map), $_map);\n      // @debug _name $_name;\n      // @debug _map 2 $_map;\n\n      @if $_map {\n        @each $key, $value in $_map {\n          // @debug key $key;\n          // @debug value $value;\n\n          @if ($key != 'none') {\n            $_key: if($key != null, if($key == 0, '-0', -$key), '');\n            --#{$prefix}#{$local-prefix}#{$_name}#{$_key}: #{$value};\n          }\n        }\n      }\n    } @else if(map.has-key($map, xs)) {\n      @each $key, $value in $map {\n        @if $key != xs {\n          --#{$prefix}#{$local-prefix}#{$key}: #{$value};\n        }\n      }\n    }\n  }\n}\n\n@mixin generate-simple-custom-properties($map: ()) {\n  @if ($map != null) {\n    @if list.length(map.keys($map)) > 0 {\n      @each $key, $value in $map {\n        @if (meta.type-of($value) == map) {\n          --#{$prefix}#{$key}: #{map.get($value, value)};\n        } @else {\n          --#{$prefix}#{$key}: #{$value};\n        }\n      }\n    }\n  }\n}\n@mixin generate-clamp-custom-properties($clamp-map, $default-unit: rem) {\n  // Only loop if the map has entries\n  // @debug map $clamp-map;\n\n  @if (list.length(map.keys($clamp-map)) > 0) {\n    @each $key, $map in $clamp-map {\n      // @debug key $key;\n      // @debug map $map;\n\n      $has-custom-property: if(\n        map.has-key($map, create-custom-property),\n        map.get($map, create-custom-property),\n        true\n      );\n\n      @if ($has-custom-property) {\n        // @debug inside;\n        $relative-to: if(\n          map.has-key($map, relative-to),\n          map.get($map, relative-to),\n          'viewport'\n        );\n\n        $threshold-unit: if(\n          map.has-key($map, threshold-unit),\n          map.get($map, threshold-unit),\n          $default-unit\n        );\n        $preferred-unit: if(\n          map.has-key($map, preferred-unit),\n          map.get($map, preferred-unit),\n          'rem'\n        );\n\n        $threshold-keys: map.keys(map.get($map, threshold));\n        $threshold-map: map.get($map, threshold);\n\n        // @debug threshold-keys $threshold-keys;\n        // @debug threshold-map $threshold-keys;\n\n        $min-size: map.get($threshold-map, list.nth($threshold-keys, 1));\n        $max-size: map.get($threshold-map, list.nth($threshold-keys, 2));\n\n        // @debug list 1 list.nth($threshold-keys, 1);\n        // @debug list 2 list.nth($threshold-keys, 2);\n\n        // @debug min-size $min-size;\n        // @debug max-size $max-size;\n\n        // @debug list-1 list.nth($threshold-keys, 1);\n        // @debug list-2 list.nth($threshold-keys, 2);\n\n        // @debug meta-list-1 meta.type-of(list.nth($threshold-keys, 1));\n        // @debug meta-list-2 meta.type-of(list.nth($threshold-keys, 2));\n\n        // @debug map.has-key($grid-breakpoints, list.nth($threshold-keys, 1));\n\n        // convert the keys to its corresponding pixel value. Otherwise, use the value as-is.\n        $key-min-formatted: if(\n          meta.type-of(list.nth($threshold-keys, 1)) ==\n            'string' and\n            map.has-key($grid-breakpoints, list.nth($threshold-keys, 1)),\n          map.get($grid-breakpoints, list.nth($threshold-keys, 1)),\n          list.nth($threshold-keys, 1)\n        );\n        $key-max-formatted: if(\n          meta.type-of(list.nth($threshold-keys, 2)) ==\n            'string' and\n            map.has-key($grid-breakpoints, list.nth($threshold-keys, 2)),\n          map.get($grid-breakpoints, list.nth($threshold-keys, 2)),\n          list.nth($threshold-keys, 2)\n        );\n\n        $min-viewport: remove-unit-and-convert($key-min-formatted);\n        $max-viewport: remove-unit-and-convert($key-max-formatted);\n\n        // @debug min-viewport $min-viewport;\n        // @debug max-viewport $max-viewport;\n\n        $delta-size: $max-size - $min-size;\n        $delta-viewport: $max-viewport - $min-viewport;\n        $change: round-to(math.div($delta-size, $delta-viewport), 6);\n\n        $preferred: if(\n          $preferred-unit == 'rem',\n          round-to(\n            math.div($max-size - ($max-viewport * $change), 16) * 1rem,\n            4\n          ),\n          round-to($max-size - ($max-viewport * $change), 4) * 1px\n        );\n\n        $rate-of-change: null;\n\n        @if $relative-to == 'viewport' {\n          $rate-of-change: round-to(100vw * $change);\n        } @else if $relative-to == 'container' {\n          $rate-of-change: round-to(100cqi * $change);\n        } @else {\n          @error 'Invalid value for $relativeTo. Expected \"viewport\" or \"container\".';\n        }\n\n        $min-size: if(\n          $threshold-unit == 'rem',\n          px-to-rem($min-size),\n          $min-size * 1px\n        );\n        $max-size: if(\n          $threshold-unit == 'rem',\n          px-to-rem($max-size),\n          $max-size * 1px\n        );\n\n        --#{$prefix}#{$key}: clamp(\n          #{$min-size},\n          calc(#{$preferred} + #{$rate-of-change}),\n          #{$max-size}\n        );\n      }\n    }\n  }\n}\n\n@mixin generate-clamp-custom-properties_og(\n  $clamp-map,\n  $clamp-prefix: '',\n  $relative-to: 'viewport',\n  $threshold-unit: 'px',\n  $unit: 'px'\n) {\n  // @debug unit $unit;\n\n  @each $key, $map in $clamp-map {\n    // @debug map $map;\n\n    $threshold: map.keys($map);\n    // @debug th $threshold;\n    $sizeMin: map.get($map, list.nth($threshold, 1));\n    $sizeMax: map.get($map, list.nth($threshold, 2));\n\n    // @debug list 1 list.nth($threshold, 1);\n    // @debug list 2 list.nth($threshold, 2);\n\n    // @debug sizeMin $sizeMin;\n    // @debug sizeMax $sizeMax;\n\n    // $viewportMin: remove-unit-and-convert(\n    //   map.get($grid-breakpoints, list.nth($threshold, 1))\n    // );\n    // $viewportMax: remove-unit-and-convert(\n    //   map.get($grid-breakpoints, list.nth($threshold, 2))\n    // );\n\n    $viewportMin: remove-unit-and-convert(list.nth($threshold, 1));\n    $viewportMax: remove-unit-and-convert(list.nth($threshold, 2));\n\n    // @debug viewportMin $viewportMin;\n    // @debug viewportMax $viewportMax;\n\n    $deltaSize: $sizeMax - $sizeMin;\n    $deltaViewport: $viewportMax - $viewportMin;\n    $change: round-to(math.div($deltaSize, $deltaViewport), 6);\n\n    // @debug change $change;\n    // @debug $change * 100vw;\n\n    // $preferred: round-to($sizeMax - ($viewportMax * $change), 4) * 1px;\n    $preferred: if(\n      $unit == 'rem',\n      round-to(math.div($sizeMax - ($viewportMax * $change), 16) * 1rem, 4),\n      round-to($sizeMax - ($viewportMax * $change), 4) * 1px\n    );\n\n    $rateOfChange: null;\n\n    @if $relative-to == 'viewport' {\n      $rateOfChange: round-to(100vw * $change);\n    } @else if $relative-to == 'container' {\n      $rateOfChange: round-to(100cqi * $change);\n    } @else {\n      @error 'Invalid value for $relativeTo. Expected \"viewport\" or \"container\".';\n    }\n\n    $sizeMin: if($threshold-unit == 'rem', px-to-rem($sizeMin), $sizeMin * 1px);\n    $sizeMax: if($threshold-unit == 'rem', px-to-rem($sizeMax), $sizeMax * 1px);\n\n    --#{$prefix}#{$clamp-prefix}#{$key}: clamp(\n      #{$sizeMin},\n      calc(#{$preferred} + #{$rateOfChange}),\n      #{$sizeMax}\n    );\n  }\n}\n\n@mixin generate-color-themes($color-theme, $removed-theme: 'default') {\n  // @debug color-theme $color-theme;\n  // @debug meta.type-of($color-theme);\n\n  $_theme-map: map.remove($color-theme, $removed-theme);\n  // @debug _theme-map $_theme-map;\n  // @debug meta meta.type-of($_theme-map);\n\n  @each $theme, $color-map, $color-hover in $_theme-map {\n    $colors: map.get($color-map, color);\n    $colors-hover: if(\n      map.get($color-map, hover) != null,\n      map.get($color-map, hover),\n      ()\n    );\n    // @debug theme $theme;\n    // @debug color $colors;\n    // @debug color-hover $colors-hover;\n\n    [data-theme='#{$theme}'] {\n      $colors-rgb: map-loop($colors, to-rgb, '$value');\n      @include generate-color-custom-properties($colors, $color-prefix);\n      @include generate-color-custom-properties-rgb($colors-rgb, $color-prefix);\n      @include generate-color-custom-properties($colors-hover, $hover-prefix);\n    }\n  }\n}\n\n@mixin generate-color-custom-properties($color-theme, $color-prefix: 'clr-') {\n  // @debug meta.type-of($color-theme);\n\n  @each $color-name, $value in $color-theme {\n    @if (meta.type-of($value) == 'color') {\n      --#{$prefix}#{$color-prefix}#{$color-name}: #{$value};\n    } @else {\n      @error 'the color input is not correct';\n    }\n  }\n}\n\n@mixin generate-color-custom-properties-rgb(\n  $color-theme-map: (),\n  $color-prefix: 'clr-'\n) {\n  // Only loop if the map has entries\n\n  // @debug MAPP $color-theme-map;\n  @if $color-theme-map != null and list.length(map.keys($color-theme-map)) > 0 {\n    @each $color, $rgb-value in $color-theme-map {\n      $type: meta.type-of($rgb-value);\n\n      @if ($type == 'list') {\n        // @debug color $color;\n        // @debug rgb $rgb-value;\n\n        --#{$prefix}#{$color-prefix}#{$color}-rgb: #{$rgb-value};\n      } @else {\n        @error 'the color input is not correct';\n      }\n    }\n  }\n}\n","/* \nThis file contains some SCSS functions sourced from the Bootstrap framework.\nSource: https://github.com/twbs/bootstrap/blob/main/scss/_functions.scss\nThese functions are used in accordance with Bootstrap's open-source license (MIT).\nModifications may have been made to the original functions.\n*/\n@use 'sass:math';\n@use 'sass:map';\n@use 'sass:meta';\n@use 'sass:color';\n@use 'sass:string';\n@use 'sass:list';\n@use 'variables' as *;\n\n@function px-to-rem($value, $precision: 3) {\n  $base-font-size: 16;\n  $_value: if(math.is-unitless($value), $value, strip-unit($value));\n  @return round-to(math.div($_value, $base-font-size), $precision) * 1rem;\n}\n\n@function strip-unit($value) {\n  @return math.div($value, $value * 0 + 1);\n}\n\n@function px-to-em($value, $precision: 3) {\n  $base-font-size: 16;\n  $_value: if(math.is-unitless($value), $value, strip-unit($value));\n  @return round-to(math.div($_value, $base-font-size), $precision) * 1em;\n}\n\n@function round-to($number, $precision: 4) {\n  $factor: math.pow(10, $precision);\n  @return math.div(math.round($number * $factor), $factor);\n}\n@function apply-unit($value, $unit) {\n  @return #{$value}#{$unit}; // Ensures no space\n}\n\n@function fluid(\n  $min-size,\n  $max-size,\n  $min-viewport,\n  $max-viewport,\n  $threshold-unit: 'rem',\n  $preffered-unit: 'rem',\n  $relative-to: 'viewport'\n) {\n  $relative-to: $relative-to;\n  $threshold-unit: $threshold-unit;\n  $preferred-unit: $preffered-unit;\n\n  $min-size: $min-size;\n  $max-size: $max-size;\n\n  // @debug min-vp meta.type-of($min-viewport);\n  // @debug max-vp meta.type-of($max-viewport);\n\n  $min-viewport: normalize-breakpoint($min-viewport, 'min-viewport');\n  $max-viewport: normalize-breakpoint($max-viewport, 'max-viewport');\n\n  // @debug minvp $min-viewport;\n  // @debug maxvp $max-viewport;\n\n  $delta-size: $max-size - $min-size;\n  $delta-viewport: $max-viewport - $min-viewport;\n  $change: round-to(math.div($delta-size, $delta-viewport), 6);\n\n  $preferred: if(\n    $preferred-unit == 'rem',\n    round-to(math.div($max-size - ($max-viewport * $change), 16) * 1rem, 4),\n    round-to($max-size - ($max-viewport * $change), 4) * 1px\n  );\n\n  $rate-of-change: null;\n\n  @if $relative-to == 'viewport' {\n    $rate-of-change: math.abs(round-to(100vw * $change));\n  } @else if $relative-to == 'container' {\n    $rate-of-change: math.abs(round-to(100cqi * $change));\n  } @else {\n    @error 'Invalid value for $relative-to. Expected \"viewport\" or \"container\".';\n  }\n\n  $min-size: if(\n    $threshold-unit == 'rem',\n    px-to-rem($min-size),\n    $min-size * 1px\n  );\n  $max-size: if(\n    $threshold-unit == 'rem',\n    px-to-rem($max-size),\n    $max-size * 1px\n  );\n\n  $should-swap: $min-size > $max-size;\n\n  @if ($should-swap) {\n    $temp: $min-size;\n    $min-size: $max-size;\n    $max-size: $temp;\n  }\n\n  $preferred-value: calc(\n    #{$preferred} #{if($should-swap, '-', '+')} #{$rate-of-change}\n  );\n\n  @return clamp(#{$min-size}, #{$preferred-value}, #{$max-size});\n}\n\n@function fluid-px(\n  $min-size,\n  $max-size,\n  $min-viewport,\n  $max-viewport,\n  $relative-to: 'viewport'\n) {\n  @return fluid(\n    $min-size,\n    $max-size,\n    $min-viewport,\n    $max-viewport,\n    'px',\n    'rem' $relative-to\n  );\n}\n\n@function normalize-breakpoint($value, $name) {\n  // @debug value $value;\n  // @debug name $name;\n  // @debug map.has-key($grid-breakpoints, $value);\n\n  @if map.has-key($grid-breakpoints, $value) {\n    @debug in else if value $value;\n    @return remove-unit-and-convert(map.get($grid-breakpoints, $value));\n  } @else if meta.type-of($value) == number {\n    @return remove-unit-and-convert($value);\n  } @else {\n    @error 'Invalid value \"#{$value}\" for #{$name}\". Must be a breakpoint identifier or a nnumber.';\n  }\n}\n\n// Removes 'em, rem', multiply with 16 and returns the unitless value\n@function remove-unit-and-convert($value) {\n  $unit: math.unit($value);\n\n  // @debug unit $unit;\n\n  @if $unit == rem {\n    $unitless-number: calc($value / 1rem);\n    @return multiplyBy(16, $unitless-number);\n  }\n\n  @if $unit == em {\n    $unitless-number: calc($value / 1em);\n\n    @return multiplyBy(16, $unitless-number);\n  }\n\n  @if $unit == px {\n    $unitless-number: calc($value / 1px);\n\n    @return $unitless-number;\n  }\n\n  @return $value;\n}\n\n@function multiplyBy($factor: 16, $value) {\n  @return $factor * $value;\n}\n// @function clr($color, $shade) {\n//   @if map.has-key($colors, $color, $shade) {\n//     @return map.get($colors, $color, $shade);\n//   } @else {\n//     @error '$colors does not have that color!';\n//   }\n// }\n// @function fs($font-size) {\n//   @if map.has-key($font-sizes, $font-size) {\n//     @return map.get($font-sizes, $font-size);\n//   } @else {\n//     @error '$font-sizes does not have that size!';\n//   }\n// }\n\n// @function size($size) {\n//   @if map.has-key($spacers, $size) {\n//     @return map.get($spacers, $size);\n//   } @else {\n//     @error '$spacers does not have that size!';\n//   }\n// }\n\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, '', '-#{$name}');\n}\n\n@function null-safe-suffix($value) {\n  @return if($value == null, '', '-#{$value}');\n}\n\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map.get($breakpoints, $name);\n\n  // @debug min $min;\n  @return if($min != 0, $min, null);\n}\n\n@function to-rem($value) {\n  $rem-value: if(math.unit($value) == 'px', px-to-rem($value), $value);\n\n  @return $rem-value;\n}\n\n// @function map-loop-advanced($map, $func, $args...) {\n//   $_map: ();\n\n//   // @debug type-of args meta.type-of($args);\n//   // @debug args__ $args;\n//   // @debug map $map;\n//   @each $key, $value in $map {\n//     // allow to pass the $key and $value of the map as an function argument\n//     // @debug a key $key value $value;\n//     $_args: ();\n//     @each $arg in $args {\n//       // @debug arg $arg;\n//       $_args: list.append(\n//         $_args,\n//         if($arg == '$key', $key, if($arg == '$value', $value, $arg))\n//       );\n//       // @debug append arg $_args;\n//     }\n\n//     // @debug after each loop _args $_args;\n\n//     $_map: map.merge(\n//       $_map,\n//       (\n//         $key: meta.call(meta.get-function($func), $_args...),\n//       )\n//     );\n//     // @debug _map $_map;\n//   }\n//   // @debug return _map $_map;\n//   @return $_map;\n// }\n@function map-loop($map, $func, $args...) {\n  $_map: ();\n\n  // @debug args $args;\n  // @debug map $map;\n\n  @each $key, $value in $map {\n    // allow to pass the $key and $value of the map as an function argument\n    // @debug key $key;\n    // @debug value $value;\n\n    $_args: ();\n    @each $arg in $args {\n      $_args: list.append(\n        $_args,\n        if(\n          $arg == '$key',\n          $key,\n          if($arg == '$value', $value, if($arg == '$pair', $key $value, $arg))\n        )\n      );\n\n      // @debug _args $_args;\n    }\n    // @debug _args after loop $_args;\n\n    $_map: map.merge(\n      $_map,\n      (\n        $key: meta.call(meta.get-function($func), $_args...),\n      )\n    );\n  }\n\n  // @debug _map $_map;\n\n  @return $_map;\n}\n\n@function to-list($value) {\n  @if meta.type-of($value) == 'list' {\n    @return $value;\n  } @else {\n    @return list.append((), $value); // Wrap it into a list\n  }\n}\n\n@function remove-prefix($string, $prefix) {\n  @if string.index($string, $prefix) == 1 {\n    @return string.slice($string, string.length($prefix) + 1);\n  }\n  @return $string;\n}\n\n@function remove-substring($string, $substring) {\n  @if string.index($string, $substring) {\n    $sub-string-index: string.index($string, $substring) - 1;\n\n    @return string.slice($string, 1, $sub-string-index);\n  }\n  @return $string;\n}\n\n@function normalize-value($value) {\n  @return if($value == '', '\"\"', $value);\n}\n\n@function to-rgb($value) {\n  // @debug value $value;\n  $_value: if($value == null, #000, $value);\n  @return color.channel($_value, 'red'), color.channel($_value, 'green'),\n    color.channel($_value, 'blue');\n}\n\n@function hover-color($identifier, $target, $color-prefix, $prefix: '') {\n  // @debug identifier $identifier;\n  // @debug target $target;\n  // @debug color-prefix $color-prefix;\n  // @debug prefix $prefix;\n\n  @return var(--#{$prefix}#{$color-prefix}#{$identifier});\n}\n\n// @function rgba-css-var($identifier, $target, $color-prefix, $prefix: '') {\n//   @if $identifier == 'body' and $target == 'bg' {\n//     @return rgba(\n//       var(--#{$prefix}#{$color-prefix}#{$identifier}-bg-rgb),\n//       var(--#{$target})\n//     );\n//   }\n//   @if $identifier == 'body' and $target == 'text' {\n//     @return rgba(\n//       var(--#{$prefix}#{$color-prefix}#{$identifier}-color-rgb),\n//       var(--#{$target})\n//     );\n//   } @else {\n//     @return rgba(\n//       var(--#{$prefix}#{$color-prefix}#{$identifier}-rgb),\n//       var(--#{$target}, 1)\n//     );\n//   }\n// }\n\n// stylelint-disable scss/dollar-variable-pattern\n@function rgba-css-var($identifier, $target) {\n  @if $identifier == 'body' and $target == 'bg' {\n    @return rgba(\n      var(--#{$prefix}#{$identifier}-bg-rgb),\n      var(--#{$prefix}#{$target}-opacity)\n    );\n  }\n  @if $identifier == 'body' and $target == 'text' {\n    @return rgba(\n      var(--#{$prefix}#{$identifier}-color-rgb),\n      var(--#{$prefix}#{$target}-opacity)\n    );\n  } @else {\n    @return rgba(\n      var(--#{$prefix}#{$identifier}-rgb),\n      var(--#{$prefix}#{$target}-opacity)\n    );\n  }\n}\n\n@function rgba-css-var-advanced($identifier, $target, $local-prefix: '') {\n  // @debug advanced identifier $identifier;\n  // @debug advanced target $target;\n\n  @if $identifier == 'body' and $target == 'bg' {\n    @return rgba(\n      var(--#{$prefix}#{$identifier}-bg-rgb),\n      var(--#{$prefix}alpha, 1)\n    );\n  }\n  @if $identifier == 'body' and $target == 'text' {\n    @return rgba(\n      var(--#{$prefix}#{$identifier}-color-rgb),\n      var(--#{$prefix}alpha, 1)\n    );\n  } @else {\n    @return rgba(\n      var(--#{$prefix}#{$local-prefix}#{$identifier}-rgb),\n      var(--#{$prefix}alpha, 1)\n    );\n  }\n}\n\n@function value-to-css-translate($value, $axis: null) {\n  // @debug value $value;\n  // @debug axis $axis;\n  @if $axis == x {\n    @return translateX(#{$value});\n  } @else if $axis ==y {\n    @return translateY(#{$value});\n  } @else {\n    @return translate(#{$value});\n  }\n}\n\n@function add-hyphen($string, $position: 'append', $separator: '-') {\n  @if $string != null {\n    // Handle empty string\n    @if $string == '' {\n      @return $string;\n    }\n\n    $result: $string;\n    $first-char: string.slice($string, 1, 1);\n    $last-char: string.slice($string, -1);\n\n    // Append (only if doesn't already end with separator)\n    @if $position == 'append' and $last-char != $separator {\n      $result: $string + $separator;\n    }\n\n    // Prepend (only if doesn't already start with separator)\n    @if $position == 'prepend' and $first-char != $separator {\n      $result: $separator + $string;\n    }\n\n    // Wrap (add to both sides only if missing)\n    @if $position == 'wrap' {\n      @if $first-char != $separator {\n        $result: $separator + $result;\n      }\n      @if $last-char != $separator {\n        $result: $result + $separator;\n      }\n    }\n\n    @return $result;\n  }\n  @return null;\n}\n\n@function single-or-null($list) {\n  // @debug list length list.length($list);\n  // @debug meta.type-of($list);\n  // @debug meta.type-of($list) == list;\n\n  @if meta.type-of($list) == 'list' and list.length($list) == 1 {\n    // @debug list value list.nth($list, 1);\n    @return list.nth($list, 1);\n  }\n  @return null;\n}\n\n@function negativify-map($map) {\n  $result: ();\n  @each $key, $value in $map {\n    @if $key != 0 {\n      $result: map.merge($result, ('n' + $key: (-$value)));\n    }\n  }\n  @return $result;\n}\n\n@function deep-loop($map, $prefix: '') {\n  $flat-map: (); // Initialize an empty map to store the results\n\n  @each $key, $value in $map {\n    // Generate a new key by concatenating the prefix and the current key\n    $new-key: if($prefix != '', '#{$prefix}-#{$key}', $key);\n\n    @if meta.type-of($value) == 'map' {\n      // Recursively call the function if the value is a map\n      $flat-map: map.merge($flat-map, deep-loop($value, $new-key));\n    } @else {\n      // Otherwise, add the key-value pair to the flat map\n      $flat-map: map.merge(\n        $flat-map,\n        (\n          $new-key: $value,\n        )\n      );\n    }\n  }\n\n  @return $flat-map; // Return the flattened map\n}\n","/* \nThis file contains SCSS variables sourced from the Bootstrap framework.\nSource: https://github.com/twbs/bootstrap/blob/main/scss/_variables.scss\nThe code used in accordance with Bootstrap's open-source license (MIT).\nModifications may have been made to the original code.\n*/\n@use \"sass:map\";\n@use \"sass:string\";\n@use \"sass:list\";\n@use \"sass:math\";\n\n/* ****************************************************** */\n/* General setting\n/* ****************************************************** */\n\n$prefix: \"\";\n$prefix-class: $prefix;\n$enable-transitions: true;\n$enable-reduced-motion: true;\n$enable-css-grid-system: true;\n\n/* ****************************************************** */\n/* Bootstrap grid system  & container \n/* ****************************************************** */\n\n$bs-prefix: bs-;\n$enable-bootstrap-grid-system: true;\n$enable-gutters: false;\n$grid-columns: 12;\n$grid-gutter-width: 24px;\n$grid-row-columns: 6;\n\n$enable-container-classes: true;\n$enable-max-container-classes: false;\n$enable-max-container-fluid-classes: false;\n$container-padding: 12px;\n\n/* ******************************************************* */\n/* Breakpoints \n/* ******************************************************* */\n\n// px values\n$grid-breakpoints: (\n  xs: 0,\n  sm: 576px,\n  md: 768px,\n  lg: 992px,\n  xl: 1200px,\n  xxl: 1400px,\n  3xl: 1600px,\n);\n\n// rem values\n// $grid-breakpoints: (\n//   xs: 0,\n//   sm: px-to-rem(576),\n//   md: px-to-rem(768),\n//   lg: px-to-rem(992),\n//   xl: px-to-rem(1200),\n//   xxl: px-to-rem(1400),\n// );\n\n/* ****************************************************** */\n/* Container max-widths \n/* ****************************************************** */\n\n$container-max-widths: (\n  sm: 540px,\n  md: 720px,\n  lg: 960px,\n  xl: 1140px,\n  xxl: 1320px,\n  3xl: 1500px,\n);\n\n// @debug map.get($container-max-widths, sm);\n// @debug map.get($container-max-widths, 3xl);\n// @debug map.get($grid-breakpoints, 3xl);\n\n/* ****************************************************** */\n/* Color theme\n/* ****************************************************** */\n\n$color-prefix: clr-;\n$hover-prefix: hover-;\n\n$primary: #0d6efd;\n$secondary: #6c757d;\n$success: #198754;\n$info: #0dcaf0;\n$warning: #ffc107;\n$danger: #dc3545;\n$light: #f8f9fa;\n$dark: #212529;\n\n$color-theme: (\n  default: (\n    color: (\n      \"primary\": #a82700,\n      \"secondary\": $secondary,\n      \"success\": $success,\n      \"info\": $info,\n      \"warning\": $warning,\n      \"danger\": $danger,\n      \"light\": $light,\n      \"dark\": $dark,\n      \"zero\": #000,\n      \"one\": #fff,\n      \"black\": #000,\n      \"white\": #fff,\n    ),\n    hover: (\n      \"primary\": #012345,\n      \"secondary\": $secondary,\n      \"success\": $success,\n      \"info\": $info,\n      \"warning\": $warning,\n      \"danger\": $danger,\n      \"light\": $light,\n      \"dark\": $dark,\n      \"zero\": #000,\n      \"quindecenary\": #fff,\n    ),\n  ),\n);\n\n$selected-theme: default;\n\n$selected-theme-hex-colors: if(\n  map.has-key($color-theme, $selected-theme, color),\n  map.get($color-theme, $selected-theme, color),\n  null\n);\n\n// pick which colors should have a rgb custom property\n// $selected-theme-rgb: (\n//   'primary': map.get($color-theme, $selected-theme, color, primary),\n// );\n\n$enable-rgb-colors: true;\n$enable-color-themes: false;\n\n/* ************************************************************* */\n/* Clamp() values\n/* ************************************************************* */\n\n// $size-prefix: fs-fluid;\n\n$size-clamp: (\n  fs-fluid-heading-primary: (\n    // default true\n    create-custom-property: true,\n    threshold: (\n      sm: 32,\n      1800: 80,\n    ),\n    // default rem\n    threshold-unit: \"rem\",\n    // default rem\n    preferred-unit: \"rem\",\n    // default viewport\n    relative-to: \"viewport\",\n  ),\n);\n\n$spacing-clamp: (\n  \"fluid-15-30\": (\n    // default true\n    create-custom-property: true,\n    threshold: (\n      576px: 32,\n      1400px: 150,\n    ),\n    // default px\n    threshold-unit: \"px\",\n    // default rem\n    preferred-unit: \"rem\",\n    // default viewport\n    relative-to: \"viewport\",\n  ),\n);\n\n/* ************************************************************* */\n/* Simple custom properties\n/* ************************************************************* */\n\n$simple-custom-properties: (\n  \"container-padding-x\": (\n    value: $container-padding,\n  ),\n  \"example-custom-property\": (\n    value: 32px,\n    property: font-size,\n    class: example-class,\n  ),\n);\n\n/* ****************************************************** */\n/* Responsive custom Properties - xs is default\n/* ****************************************************** */\n\n$responsive-custom-properties-prefix: \"\";\n\n$responsive-custom-properties: (\n  xs: (\n    \"heading-1\": (\n      value: 24px,\n      property: font-size,\n      class: res-heading-1,\n    ),\n  ),\n  sm: (\n    // 'heading-1': 34px,\n    container: map.get($container-max-widths, sm),\n  ),\n  md: (\n    container: map.get($container-max-widths, md),\n  ),\n  lg: (\n    container: map.get($container-max-widths, lg),\n  ),\n  xl: (\n    container: map.get($container-max-widths, xl),\n  ),\n  xxl: (\n    container: map.get($container-max-widths, xxl),\n  ),\n  3xl: (\n    container: map.get($container-max-widths, 3xl),\n  ),\n);\n\n/* ****************************************************** */\n/* Spacing\n/* ****************************************************** */\n\n$enable-negative-margins: true;\n\n$factor: 4px;\n$sizes-regular: ();\n\n@for $i from 0 through 50 {\n  $sizes-regular: map.merge(\n    $sizes-regular,\n    (\n      $i: if($i == 0, $i, $factor * $i),\n    )\n  );\n}\n\n// Add additional regular sizes manually\n$sizes-regular: map.merge(\n  $sizes-regular,\n  (\n    100: 100 * $factor,\n  )\n);\n\n$sizes-irregular: ();\n\n@for $i from 1 through 200 {\n  @if ($i % 4 != 0) {\n    $sizes-irregular: map.merge($sizes-irregular, (i-#{$i}: $i * 1px));\n  }\n}\n\n// Add additional irregular sizes manually\n$sizes-irregular: map.merge(\n  $sizes-irregular,\n  (\n    i-201: 201px,\n  )\n);\n\n/* ****************************************************** */\n/* Box shadows \n/* ****************************************************** */\n\n$box-shadows: (\n  custom-property-prefix: \"box-shadow\",\n  values: (\n    focus: 0 0 0 0.25rem rgba(var(--clr-primary-rgb), 0.25),\n    focus-inset: inset 0 0 0 0.25rem rgba(var(--clr-primary-rgb), 0.25),\n    null: 0 0.5rem 1rem rgba(var(--clr-dark-rgb), 0.15),\n    sm: 0 0.125rem 0.25rem rgba(var(--clr-dark-rgb), 0.075),\n    lg: 0 1rem 3rem rgba(var(--clr-dark-rgb), 0.175),\n    inset: inset 0 1px 2px rgba(var(--clr-dark-rgb), 0.075),\n    none: none,\n  ),\n);\n\n/* ****************************************************** */\n/* Z-index \n/* ****************************************************** */\n\n$z-indeces: (\n  custom-property-prefix: \"z\",\n  values: (\n    n1: -1,\n    0: 0,\n    1: 999,\n    2: 998,\n    3: 997,\n    4: 996,\n  ),\n);\n\n/* ****************************************************** */\n/* Borders  \n/* ****************************************************** */\n\n$borders: (\n  custom-property-prefix: \"border\",\n  values: (\n    main: 1px solid var(--#{$prefix}clr-zero),\n  ),\n);\n\n/* ****************************************************** */\n/* Border radius \n/* ****************************************************** */\n\n$border-radius: (\n  custom-property-prefix: \"radius\",\n  values: (\n    sm: 4px,\n    base: 8px,\n    lg: 12px,\n  ),\n);\n\n/* ****************************************************** */\n/* Transitions\n/* ****************************************************** */\n\n$transitions: (\n  custom-property-prefix: \"transition\",\n  values: (\n    focus: 0.15s ease-in-out,\n    base: all 0.2s ease-in-out,\n    fade: opacity 0.15s linear,\n    collapse: height 0.35s ease,\n    collapse-width: width 0.35s ease,\n  ),\n);\n\n/* ****************************************************** */\n/* Focus rings\n/* ****************************************************** */\n\n$focus-rings: (\n  custom-property-prefix: \"focus-ring\",\n  values: (\n    main: 0 0 0 0.25rem rgba(var(--clr-primary-rgb), 0.75),\n  ),\n);\n\n/* ****************************************************** */\n/* Font family\n/* ****************************************************** */\n\n$font-families: (\n  custom-property-name: \"font-family\",\n  values: (\n    main: (\n      \"Arial\",\n      sans-serif,\n    ),\n    sub: (\n      \"Liberation Mono\",\n      monospace,\n    ),\n  ),\n);\n\n/* ****************************************************** */\n/* Maps\n/* ****************************************************** */\n\n$percentage-values: (\n  0: 0,\n  5: 5%,\n  10: 10%,\n  15: 15%,\n  20: 20%,\n  25: 25%,\n  30: 30%,\n  35: 35%,\n  40: 40%,\n  45: 45%,\n  50: 50%,\n  55: 55%,\n  60: 60%,\n  65: 65%,\n  70: 70%,\n  75: 75%,\n  80: 80%,\n  85: 85%,\n  90: 90%,\n  95: 95%,\n  100: 100%,\n);\n\n$decimal-percentage-values: (\n  0: 0,\n  5: 0.05,\n  10: 0.1,\n  15: 0.15,\n  20: 0.2,\n  25: 0.25,\n  30: 0.3,\n  35: 0.35,\n  40: 0.4,\n  45: 0.45,\n  50: 0.5,\n  55: 0.55,\n  60: 0.6,\n  65: 0.65,\n  70: 0.7,\n  75: 0.75,\n  80: 0.8,\n  85: 0.85,\n  90: 0.9,\n  95: 0.95,\n  100: 1,\n  101: 1.01,\n  102: 1.02,\n  103: 1.03,\n  104: 1.04,\n  105: 1.05,\n  110: 1.1,\n  115: 1.15,\n  120: 1.2,\n  130: 1.3,\n);\n\n$viewport-height-values: (\n  25: 25vh,\n  50: 50vh,\n  75: 75vh,\n  100: 100vh,\n);\n$viewport-width-values: (\n  25: 25vw,\n  50: 50vw,\n  75: 75vw,\n  100: 100vw,\n);\n\n// for width, height, and positions top-right-bottom-left utility classes:\n$fixed-values: (\n  n100: -100px,\n  n150: -150px,\n  n200: -200px,\n  n250: -250px,\n  n300: -300px,\n  n16: -16px,\n  n24: -24px,\n  n25: -25px,\n  n50: -50px,\n  n75: -75px,\n  0: 0,\n  16: 16px,\n  24: 24px,\n  25: 25px,\n  50: 50px,\n  75: 75px,\n  100: 100px,\n  150: 150px,\n  200: 200px,\n  250: 250px,\n  300: 300px,\n  350: 350px,\n  400: 400px,\n  450: 450px,\n  500: 500px,\n  550: 550px,\n  600: 600px,\n  650: 650px,\n  700: 700px,\n  750: 750px,\n  800: 800px,\n  850: 850px,\n  900: 900px,\n  950: 950px,\n  1000: 1000px,\n  1050: 1050px,\n  1100: 1100px,\n  1200: 1200px,\n  1300: 1300px,\n  1400: 1400px,\n  1500: 1500px,\n  1600: 1600px,\n  1700: 1700px,\n  1800: 1800px,\n  1920: 1920px,\n);\n\n$border-widths: (\n  0: 0px,\n  1: 1px,\n  2: 2px,\n  3: 3px,\n  4: 4px,\n  5: 5px,\n  6: 6px,\n  7: 7px,\n  8: 8px,\n  9: 9px,\n  10: 10px,\n);\n","/* \nThis file contains SCSS code sourced from the Bootstrap framework.\nSource: https://github.com/twbs/bootstrap/blob/main/scss/_utilities.scss\nThe code used in accordance with Bootstrap's open-source license (MIT).\nModifications may have been made to the original code.\n*/\n\n@use 'sass:map';\n@use 'sass:list';\n@use 'sass:meta';\n@use 'sass:string';\n@use 'functions' as *;\n@use 'variables' as *;\n\n$negative-spacers: if(\n  $enable-negative-margins,\n  negativify-map($sizes-regular),\n  ()\n);\n$negative-spacers-irregular: if(\n  $enable-negative-margins,\n  negativify-map($sizes-irregular),\n  ()\n);\n$selected-theme-rgb-colors: if(\n  $enable-rgb-colors,\n  map-loop($selected-theme-hex-colors, to-rgb, '$value'),\n  if(\n    meta.variable-exists(selected-theme-rgb),\n    if(\n      list.length(map.keys($selected-theme-rgb)) > 0,\n      map-loop($selected-theme-rgb, to-rgb, '$value'),\n      null\n    ),\n    null\n  )\n);\n\n// @debug selected-theme $selected-theme-rgb-colors;\n\n$simple-custom-properties-merged: map.merge(\n  if(\n    meta.variable-exists(simple-custom-properties),\n    $simple-custom-properties,\n    ()\n  ),\n  if(\n    meta.variable-exists(responsive-custom-properties),\n    map.get($responsive-custom-properties, xs),\n    ()\n  )\n);\n//\n$utilities: ();\n$utilities: map.merge(\n  (\n    'revert-spacing': (\n      function: 'nested-rules',\n      class: revert-spacing,\n      property: (\n        '*': (\n          padding: revert,\n          margin: revert,\n        ),\n      ),\n    ),\n    'container-type': (\n      class: container-type,\n      property: container-type,\n      values: inline-size size normal revert,\n    ),\n    'marker': (\n      function: 'nested-rules',\n      class: marker,\n      property: (\n        '& li::marker': (\n          color: var(--marker-color),\n          font-size: var(--marker-font-size),\n        ),\n      ),\n    ),\n    'custom-container': (\n      function: 'property-advanced',\n      class: container-dynamic,\n      property: (\n        padding-inline: $container-padding,\n        margin-inline: auto,\n        width: 100%,\n        max-width: var(--container-dynamic-max-width),\n      ),\n    ),\n    'text-shorten': (\n      function: 'property-advanced',\n      class: shorten,\n      property: (\n        overflow: hidden,\n        line-height: var(--shorten-line-height, 1.5),\n        max-height:\n          calc(\n            1em * var(--shorten-line-height, 1.5) * var(--shorten-max-line, 4)\n          ),\n      ),\n    ),\n    'text-shorten-1': (\n      function: 'property-advanced',\n      class: shorten-1,\n      property: (\n        overflow: hidden,\n        line-height: var(--shorten-line-height, 1.5),\n        max-height: calc(1em * var(--shorten-line-height, 1.5) * 1),\n      ),\n    ),\n    'text-shorten-2': (\n      function: 'property-advanced',\n      class: shorten-2,\n      property: (\n        overflow: hidden,\n        line-height: var(--shorten-line-height, 1.5),\n        max-height: calc(1em * var(--shorten-line-height, 1.5) * 2),\n      ),\n    ),\n    'text-shorten-3': (\n      function: 'property-advanced',\n      class: shorten-3,\n      property: (\n        overflow: hidden,\n        line-height: var(--shorten-line-height, 1.5),\n        max-height: calc(1em * var(--shorten-line-height, 1.5) * 3),\n      ),\n    ),\n    'text-shorten-4': (\n      function: 'property-advanced',\n      class: shorten-4,\n      property: (\n        overflow: hidden,\n        line-height: var(--shorten-line-height, 1.5),\n        max-height: calc(1em * var(--shorten-line-height, 1.5) * 4),\n      ),\n    ),\n    'text-shorten-5': (\n      function: 'property-advanced',\n      class: shorten-5,\n      property: (\n        overflow: hidden,\n        line-height: var(--shorten-line-height, 1.5),\n        max-height: calc(1em * var(--shorten-line-height, 1.5) * 5),\n      ),\n    ),\n    'marker-image': (\n      function: 'nested-rules',\n      class: marker-image,\n      property: (\n        '& li::marker': (\n          list-style-image: var(--marker-image-src),\n        ),\n      ),\n    ),\n    'hyphen': (\n      class: hyphens,\n      property: hyphens,\n      values: auto none manual,\n    ),\n    'linear-gradient': (\n      class: linear-gradient,\n      property: background,\n      values: (\n        null:\n          linear-gradient(\n            var(--gradient-direction, to top),\n            var(--gradient-first-color) var(--gradient-first-stop),\n            var(--gradient-second-color) var(--gradient-second-stop)\n          ),\n      ),\n    ),\n    'backdrop-blur': (\n      class: backdrop-blur,\n      property: backdrop-filter,\n      values: (\n        null: blur(var(--backdrop-blur)),\n        1: blur(1px),\n        2: blur(2px),\n        3: blur(3px),\n        4: blur(4px),\n        5: blur(5px),\n        6: blur(6px),\n        7: blur(7px),\n        8: blur(8px),\n        9: blur(9px),\n        10: blur(10px),\n      ),\n    ),\n    'scrollbar-webkit-custom': (\n      state: '::-webkit-scrollbar',\n      class: custom-scrollbar,\n      required-property: (\n        '-webkit-appearance': none,\n      ),\n      property: width height,\n      values: (\n        null: 14px,\n      ),\n    ),\n    'scrollthumb-webkit-custom': (\n      function: 'property-advanced',\n      state: '::-webkit-scrollbar-thumb',\n      class: custom-scrollthumb,\n      property: (\n        border-radius: 8px,\n        border: 3px solid #fff,\n        background-color: rgba(0, 0, 0, 0.3),\n      ),\n    ),\n    'scrollbar-hide-on-touch-device': (\n      media: '(hover: none) and (pointer: coarse)',\n      class: scrollbar-touch,\n      property: scrollbar-width,\n      values: none,\n    ),\n    'scrollbar': (\n      class: scrollbar,\n      property: scrollbar-width,\n      values: auto thin none,\n    ),\n    'aspect-ratio': (\n      class: aspect-ratio,\n      property: aspect-ratio,\n      values: (\n        none: var(--aspect-ratio),\n        square: string.unquote('1 / 1'),\n        video: string.unquote('16 / 9'),\n        classic: string.unquote('4 / 3'),\n        photo: string.unquote('3 / 2'),\n        portrait: string.unquote('2 / 3'),\n        ultrawide: string.unquote('21 / 9'),\n      ),\n    ),\n    'flows': (\n      function: 'nested-rules',\n      class: flows,\n      property: (\n        '*:where(:not(:first-child))': (\n          margin-top: var(--flow-space, 1em),\n        ),\n      ),\n    ),\n    'flow-easy': (\n      function: 'nested-rules',\n      class: flow-simple,\n      property: (\n        '> *:where(:not(:first-child))': (\n          margin-top: var(--flow-space, 1em),\n        ),\n      ),\n    ),\n    'flow': (\n      function: 'nested-rules',\n      class: flow,\n      property: (\n        '> :first-child': (\n          margin: 0,\n        ),\n        '> * + *': (\n          margin-top: var(--flow-space, 16px),\n        ),\n      ),\n    ),\n    'flow-deep': (\n      function: 'nested-rules',\n      class: flow-deep,\n      property: (\n        '> :first-child': (\n          margin: 0,\n        ),\n        '> * + *': (\n          margin-top: var(--flow-space, 16px),\n          margin-bottom: 0,\n        ),\n        '> :last-child': (\n          margin-bottom: var(--flow-space-last, 0px),\n        ),\n      ),\n    ),\n    'flows-ring-a': (\n      function: 'nested-rules',\n      class: flows-rings-deep-a,\n      property: (\n        'a:focus': (\n          outline: 0,\n          box-shadow: var(--box-shadow-focus),\n        ),\n      ),\n    ),\n    'border-custom-properties': (\n      function: 'custom-property-value',\n      property: border,\n      class: border,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(borders),\n          map.get($borders, custom-property-prefix),\n          null\n        ),\n      values: if(meta.variable-exists(borders), map.get($borders, values), null),\n    ),\n    'border-cp-top': (\n      function: 'custom-property-value',\n      property: border-top,\n      class: border-top,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(borders),\n          map.get($borders, custom-property-prefix),\n          null\n        ),\n      values: if(meta.variable-exists(borders), map.get($borders, values), null),\n    ),\n    'border-cp-bottom': (\n      function: 'custom-property-value',\n      property: border-bottom,\n      class: border-bottom,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(borders),\n          map.get($borders, custom-property-prefix),\n          null\n        ),\n      values: if(meta.variable-exists(borders), map.get($borders, values), null),\n    ),\n    'border-cp-start': (\n      function: 'custom-property-value',\n      property: border-left,\n      class: border-start,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(borders),\n          map.get($borders, custom-property-prefix),\n          null\n        ),\n      values: if(meta.variable-exists(borders), map.get($borders, values), null),\n    ),\n    'border-cp-end': (\n      function: 'custom-property-value',\n      property: border-right,\n      class: border-end,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(borders),\n          map.get($borders, custom-property-prefix),\n          null\n        ),\n      values: if(meta.variable-exists(borders), map.get($borders, values), null),\n    ),\n    'border-cp-y': (\n      function: 'custom-property-value',\n      property: border-block,\n      class: border-y,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(borders),\n          map.get($borders, custom-property-prefix),\n          null\n        ),\n      values: if(meta.variable-exists(borders), map.get($borders, values), null),\n    ),\n    'border-cp-x': (\n      function: 'custom-property-value',\n      property: border-inline,\n      class: border-x,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(borders),\n          map.get($borders, custom-property-prefix),\n          null\n        ),\n      values: if(meta.variable-exists(borders), map.get($borders, values), null),\n    ),\n    'fade': (\n      function: 'nested-rules',\n      class: fade,\n      property: (\n        transition: opacity 0.15s linear,\n        '&:not(.show)': (\n          opacity: 0,\n        ),\n        '&.show': (\n          opacity: 0.5,\n        ),\n      ),\n    ),\n    'collapse': (\n      function: 'nested-rules',\n      class: collapse,\n      property: (\n        '&:not(.show)': (\n          display: none,\n        ),\n      ),\n    ),\n    'collapsing': (\n      function: 'property-advanced',\n      class: collapsing,\n      property: (\n        height: 0,\n        overflow: hidden,\n        transition: height 0.35s ease,\n      ),\n    ),\n    'collapsing-horizontal': (\n      function: 'property-advanced',\n      class: collapsing-horizontal,\n      property: (\n        width: 0,\n        height: auto,\n        transition: width 0.35 ease,\n      ),\n    ),\n    'flow-ring': (\n      function: 'nested-rules',\n      class: flow-ring,\n      property: (\n        '*:focus': (\n          outline: 0,\n          box-shadow: 0 0 0 var(--focus-ring-width, 4px)\n            var(--focus-ring-color, var(--#{$prefix}clr-primary)),\n        ),\n      ),\n    ),\n    'flow-ring-a': (\n      function: 'nested-rules',\n      class: flow-ring-a,\n      property: (\n        'a:focus': (\n          outline: 0,\n          box-shadow: 0 0 0 var(--focus-ring-width, 4px)\n            var(--focus-ring-color, var(--#{$prefix}clr-primary)),\n        ),\n      ),\n    ),\n    'box-sizing': (\n      property: box-sizing,\n      class: box,\n      values: border-box content-box,\n    ),\n    'inset': (\n      property: inset,\n      class: inset,\n      values: 0,\n    ),\n    'isolation': (\n      property: isolation,\n      class: isolate,\n      values: (\n        null: isolate,\n      ),\n    ),\n    'cursor': (\n      property: cursor,\n      class: cursor,\n      values: pointer help wait crosshair not-allowed zoom-in grab,\n    ),\n\n    'overlay-custom': (\n      function: 'nested-rules',\n      class: overlay,\n      property: (\n        position: relative,\n        '&::after': (\n          content: \"''\",\n          position: absolute,\n          inset: 0,\n          background-color: var(--overlay-background, var(--clr-black)),\n          opacity: var(--alpha, 0.5),\n          z-index: var(--overlay-zindex, -1),\n        ),\n      ),\n    ),\n    'overlay-dark': (\n      property: border-image,\n      class: overlay-dark,\n      values: (\n        1: fill 0 linear-gradient(rgba(0, 0, 0, 0.1), rgba(0, 0, 0, 0.1)),\n        2: fill 0 linear-gradient(rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2)),\n        3: fill 0 linear-gradient(rgba(0, 0, 0, 0.3), rgba(0, 0, 0, 0.3)),\n        4: fill 0 linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.4)),\n        5: fill 0 linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)),\n        6: fill 0 linear-gradient(rgba(0, 0, 0, 0.6), rgba(0, 0, 0, 0.6)),\n        7: fill 0 linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)),\n        8: fill 0 linear-gradient(rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0.8)),\n        9: fill 0 linear-gradient(rgba(0, 0, 0, 0.9), rgba(0, 0, 0, 0.9)),\n      ),\n    ),\n    'resize': (\n      property: resize,\n      class: resize,\n      values: none horizontal vertical both,\n    ),\n    'align': (\n      property: vertical-align,\n      class: align,\n      values: baseline top middle bottom text-bottom text-top,\n    ),\n    'float': (\n      responsive: true,\n      property: float,\n      values: (\n        start: left,\n        end: right,\n        none: none,\n      ),\n    ),\n    'object-fit': (\n      responsive: true,\n      property: object-fit,\n      class: object,\n      values: (\n        contain: contain,\n        cover: cover,\n        fill: fill,\n        scale: scale-down,\n        none: none,\n      ),\n    ),\n    'object-position': (\n      responsive: true,\n      property: object-position,\n      class: object,\n      values: top bottom left right center,\n    ),\n    'display': (\n      responsive: true,\n      property: display,\n      class: d,\n      values: inline inline-block block grid inline-grid table table-row\n        table-cell flex inline-flex none,\n    ),\n    'grid-template-rows': (\n      property: grid-template-rows,\n      class: grid-template-rows,\n      values: subgrid,\n    ),\n    'grid-template-columns': (\n      property: grid-template-columns,\n      class: grid-template-columns,\n      values: subgrid,\n    ),\n    'grid-span': (\n      property: grid-row,\n      class: span,\n      values: (\n        1: span 1,\n        2: span 2,\n        3: span 3,\n        4: span 4,\n        5: span 5,\n      ),\n    ),\n    'translate-fixed': (\n      property: transform,\n      class: translate-f,\n      values: map-loop($fixed-values, value-to-css-translate, '$value'),\n    ),\n    'translate-x-fixed': (\n      property: transform,\n      class: translate-y-f,\n      values: map-loop($fixed-values, value-to-css-translate, '$value', x),\n    ),\n    'translate-y-fixed': (\n      property: transform,\n      class: translate-x-f,\n      values: map-loop($fixed-values, value-to-css-translate, '$value', y),\n    ),\n    'translate-quarter': (\n      property: transform,\n      class: translate-quarter,\n      values: (\n        n: translate(-25%, -25%),\n        null: translate(25%, 25%),\n        nx: translateX(-25%),\n        ny: translateY(-25%),\n        x: translateX(25%),\n        y: translateY(25%),\n      ),\n    ),\n    'translate-middle': (\n      property: transform,\n      class: translate-middle,\n      values: (\n        null: translate(50%, 50%),\n        n: translate(-50%, -50%),\n        nx: translateX(-50%),\n        ny: translateY(-50%),\n        x: translateX(50%),\n        y: translateY(50%),\n      ),\n    ),\n    'translate-three-quarters': (\n      property: transform,\n      class: translate-three-quarters,\n      values: (\n        null: translate(75%, 75%),\n        n: translate(-75%, -75%),\n        nx: translateX(-75%),\n        ny: translateY(-75%),\n        x: translateX(75%),\n        y: translateY(75%),\n      ),\n    ),\n    'translate-full': (\n      property: transform,\n      class: translate-full,\n      values: (\n        null: translate(100%, 100%),\n        n: translate(-100%, -100%),\n        nx: translateX(-100%),\n        ny: translateY(-100%),\n        x: translateX(100%),\n        y: translateY(100%),\n      ),\n    ),\n    'translate-x': (\n      property: transform,\n      class: translate-x,\n      values: (\n        null: translateX(var(--translate-x)),\n      ),\n    ),\n    'translate-y': (\n      property: transform,\n      class: translate-full,\n      values: (\n        null: translateY(var(--translate-y)),\n      ),\n    ),\n    'border': (\n      class: border,\n      property: border,\n      values: (\n        null: 1px solid var(--border-clr, var(--#{$prefix}clr-primary)),\n      ),\n    ),\n    'border-top': (\n      class: border-top,\n      property: border-top,\n      values: (\n        null: 1px solid var(--border-clr, var(--#{$prefix}clr-primary)),\n      ),\n    ),\n    'border-bottom': (\n      class: border-bottom,\n      property: border-bottom,\n      values: (\n        null: 1px solid var(--border-clr, var(--#{$prefix}clr-primary)),\n      ),\n    ),\n    'border-left': (\n      class: border-start,\n      property: border-left,\n      values: (\n        null: 1px solid var(--border-clr, var(--#{$prefix}clr-primary)),\n      ),\n    ),\n    'border-right': (\n      class: border-end,\n      property: border-right,\n      values: (\n        null: 1px solid var(--border-clr, var(--#{$prefix}clr-primary)),\n      ),\n    ),\n    'border-rgba': (\n      class: border-rgba,\n      property: border,\n      values: (\n        null: 1px solid\n          var(--border-clr-rgb, rgba(var(--#{$prefix}clr-primary-rgb), 1)),\n      ),\n    ),\n    'border-width': (\n      property: border-width,\n      class: border,\n      values: if(meta.variable-exists(border-widths), $border-widths, null),\n      important: true,\n      responsive: true,\n    ),\n    'border-block-width': (\n      property: border-width,\n      class: border-y,\n      values: if(meta.variable-exists(border-widths), $border-widths, null),\n      important: true,\n      responsive: true,\n    ),\n    'border-inline-width': (\n      property: border-width,\n      class: border-x,\n      values: if(meta.variable-exists(border-widths), $border-widths, null),\n      important: true,\n      responsive: true,\n    ),\n    'border-width-top': (\n      class: border-top,\n      property: border-top-width,\n      values: if(meta.variable-exists(border-widths), $border-widths, null),\n      important: true,\n      responsive: true,\n    ),\n    'border-width-bottom': (\n      class: border-bottom,\n      property: border-bottom-width,\n      values: if(meta.variable-exists(border-widths), $border-widths, null),\n      important: true,\n      responsive: true,\n    ),\n    'border-width-left': (\n      class: border-start,\n      property: border-left-width,\n      values: if(meta.variable-exists(border-widths), $border-widths, null),\n      important: true,\n      responsive: true,\n    ),\n    'border-width-right': (\n      class: border-end,\n      property: border-right-width,\n      values: if(meta.variable-exists(border-widths), $border-widths, null),\n      important: true,\n      responsive: true,\n    ),\n    'border-styles': (\n      property: border-style,\n      class: border-style,\n      values: solid dashed dotted groove none double inset,\n    ),\n    'border-color-rgba-custom-property-value': (\n      function: 'css-var',\n      css-variable-name: border-clr-rgb,\n      class: border-clr-rgb,\n      values:\n        map-loop(\n          $selected-theme-rgb-colors,\n          rgba-css-var-advanced,\n          '$key',\n          null,\n          $color-prefix\n        ),\n    ),\n    'border-colors-custom-property-value': (\n      function: 'css-var',\n      css-variable-name: border-clr,\n      class: border-clr,\n      custom-property-prefix:\n        if(meta.variable-exists(color-prefix), $color-prefix, null),\n      values:\n        if(\n          meta.variable-exists(selected-theme-hex-colors),\n          $selected-theme-hex-colors,\n          null\n        ),\n    ),\n    'focus-ring': (\n      function: 'property-advanced',\n      class: focus-ring,\n      state: ':focus',\n      property: (\n        outline: 0,\n        box-shadow: 0 0 0 var(--focus-ring-width, 4px)\n          var(--focus-ring-color, var(--#{$prefix}clr-primary)),\n      ),\n    ),\n    'focus-ring-focus-visible': (\n      function: 'property-advanced',\n      class: focus-ring-fv,\n      state: ':focus-visible',\n      property: (\n        outline: 0,\n        box-shadow: 0 0 0 var(--focus-ring-width, 4px)\n          var(--focus-ring-color, var(--#{$prefix}clr-primary)),\n      ),\n    ),\n    'focus-ring-focus-focus-visible': (\n      function: 'property-advanced',\n      class: focus-ring-ffv,\n      state: ':focus' ':focus-visible',\n      property: (\n        outline: 0,\n        box-shadow: 0 0 0 var(--focus-ring-width, 4px)\n          var(--focus-ring-color, var(--#{$prefix}clr-primary)),\n      ),\n    ),\n    'focus-ring-rgba-colors-cp': (\n      function: 'css-var',\n      css-variable-name: focus-ring-color,\n      class: focus-ring-clr-rgb,\n      values:\n        map-loop(\n          $selected-theme-rgb-colors,\n          rgba-css-var-advanced,\n          '$key',\n          'focus-ring',\n          $color-prefix\n        ),\n    ),\n    'focus-ring-hex-colors-cp': (\n      function: 'css-var',\n      css-variable-name: focus-ring-color,\n      class: focus-ring-clr,\n      custom-property-prefix:\n        if(meta.variable-exists(color-prefix), $color-prefix, null),\n      values:\n        if(\n          meta.variable-exists(selected-theme-hex-colors),\n          $selected-theme-hex-colors,\n          null\n        ),\n    ),\n    'focus-ring-width': (\n      function: 'css-var',\n      css-variable-name: focus-ring-width,\n      class: focus-ring,\n      values: (\n        0: 0,\n        1: 1px,\n        2: 2px,\n        3: 3px,\n        4: 4px,\n        5: 5px,\n        6: 6px,\n        7: 7px,\n        8: 8px,\n        9: 9px,\n        10: 10px,\n      ),\n    ),\n    'width-fixed': (\n      property: width,\n      class: w-f,\n      values: $fixed-values,\n      responsive: true,\n    ),\n    'width-height': (\n      class: wh,\n      property: width height,\n      values: $percentage-values,\n    ),\n    'width': (\n      property: width,\n      class: w,\n      values:\n        map.merge(\n          $percentage-values,\n          (\n            auto: auto,\n            fit-content: fit-content,\n            min-content: min-content,\n            max-content: max-content,\n          )\n        ),\n    ),\n    'max-width': (\n      property: max-width,\n      class: mw,\n      values: $percentage-values,\n    ),\n    'max-width-fixed': (\n      property: max-width,\n      class: max-w-f,\n      values: $fixed-values,\n    ),\n    'viewport-width': (\n      property: width,\n      class: vw,\n      values: $viewport-width-values,\n    ),\n    'min-width': (\n      property: min-width,\n      class: min-w-f,\n      values: $fixed-values,\n    ),\n    'min-viewport-width': (\n      property: min-width,\n      class: min-vw,\n      values: $viewport-width-values,\n    ),\n    'fixed-height': (\n      property: height,\n      class: h-f,\n      values: $fixed-values,\n    ),\n    'height': (\n      property: height,\n      class: h,\n      values:\n        map.merge(\n          $percentage-values,\n          (\n            auto: auto,\n          )\n        ),\n    ),\n    'fixed-width-height': (\n      property: height width,\n      class: wh-f,\n      values: $fixed-values,\n    ),\n    'max-height': (\n      property: max-height,\n      class: mh,\n      values: $percentage-values,\n    ),\n    'viewport-height': (\n      property: height,\n      class: vh,\n      values: $viewport-height-values,\n    ),\n    'min-viewport-height': (\n      property: min-height,\n      class: min-vh,\n      values: $viewport-height-values,\n    ),\n    'flex': (\n      responsive: true,\n      property: flex,\n      values: (\n        1: 1,\n        fill: 1 1 auto,\n        none: none,\n      ),\n    ),\n    'flex-direction': (\n      responsive: true,\n      property: flex-direction,\n      class: flex,\n      values: row column row-reverse column-reverse,\n    ),\n    'flex-grow': (\n      responsive: true,\n      property: flex-grow,\n      class: flex,\n      values: (\n        grow-0: 0,\n        grow-1: 1,\n        grow-1-5: 1.5,\n        grow-2: 2,\n      ),\n    ),\n    'flex-shrink': (\n      responsive: true,\n      property: flex-shrink,\n      class: flex,\n      values: (\n        shrink-0: 0,\n        shrink-1: 1,\n        shrink-1-5: 1.5,\n        shrink-2: 2,\n      ),\n    ),\n    'flex-wrap': (\n      responsive: true,\n      property: flex-wrap,\n      class: flex,\n      values: wrap nowrap wrap-reverse,\n    ),\n    'justify-content': (\n      responsive: true,\n      property: justify-content,\n      values: (\n        start: flex-start,\n        end: flex-end,\n        center: center,\n        between: space-between,\n        around: space-around,\n        evenly: space-evenly,\n      ),\n    ),\n    'align-items': (\n      responsive: true,\n      property: align-items,\n      values: (\n        start: flex-start,\n        end: flex-end,\n        center: center,\n        baseline: baseline,\n        stretch: stretch,\n      ),\n    ),\n    'align-content': (\n      responsive: true,\n      property: align-content,\n      values: (\n        start: flex-start,\n        end: flex-end,\n        center: center,\n        between: space-between,\n        around: space-around,\n        stretch: stretch,\n      ),\n    ),\n    'align-self': (\n      responsive: true,\n      property: align-self,\n      values: (\n        auto: auto,\n        start: start,\n        end: end,\n        center: center,\n        baseline: baseline,\n        stretch: stretch,\n      ),\n    ),\n    'justify-self': (\n      class: justify-self,\n      responsive: true,\n      property: justify-self,\n      values: (\n        start: start,\n        end: end,\n        center: center,\n        between: space-between,\n        around: space-around,\n        evenly: space-evenly,\n      ),\n    ),\n    'place-self': (\n      class: place-self,\n      responsive: true,\n      property: place-self,\n      values: (\n        start: start,\n        end: end,\n        center: center,\n        between: space-between,\n        around: space-around,\n        evenly: space-evenly,\n      ),\n    ),\n    'order': (\n      responsive: true,\n      property: order,\n      values: (\n        first: -1,\n        0: 0,\n        1: 1,\n        2: 2,\n        3: 3,\n        4: 4,\n        5: 5,\n        last: 6,\n      ),\n    ),\n    'font-size': (\n      responsive: true,\n      property: font-size,\n      class: fs,\n      values:\n        map-loop(\n          map.merge($sizes-regular, ($sizes-irregular)),\n          to-rem,\n          '$value'\n        ),\n    ),\n    'font-style': (\n      property: font-style,\n      class: fst,\n      values: italic normal,\n    ),\n    'font-weight': (\n      property: font-weight,\n      class: fw,\n      values: (\n        thin: 100,\n        extra-light: 200,\n        light: 300,\n        regular: 400,\n        medium: 500,\n        semibold: 600,\n        bold: 700,\n        extra-bold: 800,\n        'black': 900,\n      ),\n    ),\n    'line-height': (\n      property: line-height,\n      class: lh,\n      values: (\n        70: 0.7,\n        75: 0.75,\n        80: 0.8,\n        85: 0.85,\n        90: 0.9,\n        95: 0.95,\n        100: 1,\n        110: 1.1,\n        120: 1.2,\n        130: 1.3,\n        140: 1.4,\n        base: 1.5,\n        heading: 1.1,\n        sm: 1.25,\n        lg: 2,\n      ),\n    ),\n    'text-align': (\n      responsive: true,\n      property: text-align,\n      class: text,\n      values: (\n        start: left,\n        end: right,\n        center: center,\n      ),\n    ),\n    'text-transform': (\n      property: text-transform,\n      class: text,\n      values: lowercase uppercase capitalize,\n    ),\n    'white-space': (\n      property: white-space,\n      class: text,\n      values: (\n        wrap: normal,\n        nowrap: nowrap,\n      ),\n    ),\n    'word-wrap': (\n      property: word-wrap word-break,\n      class: text,\n      values: (\n        break: break-word,\n      ),\n    ),\n    'alpha': (\n      function: 'css-var',\n      class: alpha,\n      css-variable-name: alpha,\n      values: $decimal-percentage-values,\n    ),\n    'opacity': (\n      property: opacity,\n      values: $decimal-percentage-values,\n    ),\n    'overflow': (\n      property: overflow,\n      values: auto hidden visible scroll clip,\n    ),\n    'overflow-x': (\n      property: overflow-x,\n      values: auto hidden visible scroll clip,\n    ),\n    'overflow-y': (\n      property: overflow-y,\n      values: auto hidden visible scroll clip,\n    ),\n    'gradient': (\n      property: background-image,\n      class: bg,\n      values: (\n        gradient: var(--#{$prefix}gradient),\n      ),\n    ),\n    'text-underline': (\n      property: text-decoration-line,\n      class: text,\n      values: (\n        underline: underline,\n        none: none,\n        underline-dotted: underline dotted,\n        line-through: line-through,\n      ),\n    ),\n    'text-underline-offset': (\n      property: text-underline-offset,\n      class: text,\n      values: (\n        0: 0,\n        1: 1px,\n        2: 2px,\n        3: 3px,\n        4: 4px,\n        5: 5px,\n      ),\n    ),\n    'text-decoration-color': (\n      function: 'custom-property-value',\n      property: text-decoration-color,\n      class: text-underline,\n      custom-property-prefix:\n        if(meta.variable-exists(color-prefix), $color-prefix, null),\n      values:\n        if(\n          meta.variable-exists(selected-theme-hex-colors),\n          $selected-theme-hex-colors,\n          null\n        ),\n    ),\n    'hover-text-underline': (\n      state: ':hover',\n      property: text-decoration-line,\n      class: hover-text,\n      values: (\n        underline: underline,\n        underline-dotted: underline dotted,\n        line-through: line-through,\n      ),\n    ),\n    'user-select': (\n      property: user-select,\n      values: all auto none,\n    ),\n    'pointer-events': (\n      property: pointer-events,\n      class: pe,\n      values: none auto,\n    ),\n    'visibility': (\n      property: visibility,\n      class: visibility,\n      values: visible hidden,\n    ),\n    'reset-spacing': (\n      function: 'nested-rules',\n      class: reset-spacing,\n      property: (\n        '*': (\n          padding: 0,\n          margin: 0,\n        ),\n      ),\n    ),\n    'list-none': (\n      property: list-style,\n      class: list,\n      values: none,\n    ),\n    'list-reset-a': (\n      function: 'nested-rules',\n      class: list-reset-deep-a,\n      property: (\n        list-style: none,\n        padding-left: 0,\n        a: (\n          text-decoration: none,\n        ),\n      ),\n    ),\n    'list-none-deep': (\n      function: 'nested-rules',\n      class: list-none-deep,\n      property: (\n        list-style: none,\n        a: (\n          text-decoration: none,\n        ),\n      ),\n    ),\n    '.list-reset-deep': (\n      function: 'nested-rules',\n      class: list-reset-deep,\n      property: (\n        'ul,ol': (\n          list-style: none,\n          padding-left: 0,\n          margin-block: 0,\n        ),\n        a: (\n          text-decoration: none,\n        ),\n      ),\n    ),\n    'simple-and-resposive-custom-properties': (\n      function: 'simple-custom-property',\n      values: $simple-custom-properties-merged,\n    ),\n    'font-family': (\n      function: 'custom-property-value',\n      property: font-family,\n      class: ff,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(font-families),\n          map.get($font-families, custom-property-prefix),\n          null\n        ),\n      values:\n        if(\n          meta.variable-exists(font-families),\n          map.get($font-families, values),\n          null\n        ),\n    ),\n    'box-shadow-custom': (\n      function: 'custom-property-value',\n      property: box-shadow,\n      class: box-shadow,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(box-shadows),\n          map.get($box-shadows, custom-property-prefix),\n          null\n        ),\n      values:\n        if(\n          meta.variable-exists(box-shadows),\n          map.get($box-shadows, values),\n          null\n        ),\n    ),\n    'box-shadow': (\n      property: box-shadow,\n      class: box-shadow,\n      values: (\n        none: none,\n      ),\n    ),\n    'focus-ring-main': (\n      function: 'custom-property-value',\n      state: ':focus',\n      required-property: (\n        outline: 0,\n      ),\n      property: box-shadow,\n      class: focus-ring,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(focus-rings),\n          map.get($focus-rings, custom-property-prefix),\n          null\n        ),\n      values:\n        if(\n          meta.variable-exists(focus-rings),\n          map.get($focus-rings, values),\n          null\n        ),\n    ),\n    'transition-custom': (\n      function: 'custom-property-value',\n      property: transition,\n      class: transition,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(transitions),\n          map.get($transitions, custom-property-prefix),\n          null\n        ),\n      values:\n        if(\n          meta.variable-exists(transitions),\n          map.get($transitions, values),\n          null\n        ),\n    ),\n    'transition': (\n      property: transition,\n      class: transition,\n      values: (\n        none: none,\n        all: all 0.3s,\n        background: background 0.3s,\n        opacity: opacity 0.3s,\n        shadow: box-shadow 0.3s,\n        height: height 0.3s,\n      ),\n    ),\n    'transition-duration': (\n      property: transition-duration,\n      class: duration,\n      values: (\n        100: 100ms,\n        200: 200ms,\n        300: 300ms,\n        400: 400ms,\n        500: 500ms,\n        600: 600ms,\n        700: 700ms,\n        800: 800ms,\n        900: 900ms,\n        1000: 1000ms,\n        2000: 2000ms,\n        3000: 3000ms,\n      ),\n    ),\n    'transition-timing': (\n      property: transition-timing-function,\n      class: timing,\n      values: linear ease-in ease-out ease-in-out,\n    ),\n    'z-index': (\n      function: 'custom-property-value',\n      property: z-index,\n      class: z,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(z-indeces),\n          map.get($z-indeces, custom-property-prefix),\n          null\n        ),\n      values:\n        if(meta.variable-exists(z-indeces), map.get($z-indeces, values), null),\n    ),\n    'border-radius-merged': (\n      property: border-radius,\n      class: radius,\n      values:\n        map.merge(\n          $fixed-values,\n          (\n            circle: 50%,\n            round: 100%,\n          )\n        ),\n    ),\n    'border-radius': (\n      function: 'custom-property-value',\n      property: border-radius,\n      class: radius,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, custom-property-prefix),\n          null\n        ),\n      values:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, values),\n          null\n        ),\n    ),\n    'border-radius-start': (\n      function: 'custom-property-value',\n      property: border-bottom-left-radius border-top-left-radius,\n      class: radius-start,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, custom-property-prefix),\n          null\n        ),\n      values:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, values),\n          null\n        ),\n    ),\n    'border-radius-end': (\n      function: 'custom-property-value',\n      property: border-bottom-left-radius border-top-right-radius,\n      class: radius-end,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, custom-property-prefix),\n          null\n        ),\n      values:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, values),\n          null\n        ),\n    ),\n    'border-radius-top': (\n      function: 'custom-property-value',\n      property: border-top-left-radius border-top-right-radius,\n      class: radius-top,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, custom-property-prefix),\n          null\n        ),\n      values:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, values),\n          null\n        ),\n    ),\n    'border-bottom-radius': (\n      function: 'custom-property-value',\n      property: border-bottom-left-radius border-bottom-right-radius,\n      class: radius-bottom,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, custom-property-prefix),\n          null\n        ),\n      values:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, values),\n          null\n        ),\n    ),\n    'border-top-left-radius': (\n      function: 'custom-property-value',\n      property: border-top-left-radius,\n      class: radius-top-start,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, custom-property-prefix),\n          null\n        ),\n      values:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, values),\n          null\n        ),\n    ),\n    'border-top-right-radius': (\n      function: 'custom-property-value',\n      property: border-top-right-radius,\n      class: radius-top-end,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, custom-property-prefix),\n          null\n        ),\n      values:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, values),\n          null\n        ),\n    ),\n    'border-bottom-left-radius': (\n      function: 'custom-property-value',\n      property: border-bottom-left-radius,\n      class: radius-bottom-start,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, custom-property-prefix),\n          null\n        ),\n      values:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, values),\n          null\n        ),\n    ),\n    'border-bottom-right-radius': (\n      function: 'custom-property-value',\n      property: border-bottom-right-radius,\n      class: radius-bottom-end,\n      custom-property-prefix:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, custom-property-prefix),\n          null\n        ),\n      values:\n        if(\n          meta.variable-exists(border-radius),\n          map.get($border-radius, values),\n          null\n        ),\n    ),\n    'flex-center': (\n      function: 'property-advanced',\n      class: flex-center,\n      property: (\n        display: flex,\n        justify-content: center,\n        align-items: center,\n      ),\n    ),\n    'default-button-style': (\n      function: 'property-advanced',\n      class: btn-style-reset,\n      property: (\n        background-color: transparent,\n        cursor: pointer,\n        border: none,\n      ),\n    ),\n    'clear-float': (\n      function: 'property-advanced',\n      class: clear-float,\n      state: '::after',\n      property: (\n        content: '',\n        display: block,\n        clear: both,\n      ),\n    ),\n    'sr-only-focusable': (\n      function: 'property-advanced',\n      class: sr-only-focusable,\n      state: ':active' ':focus',\n      property: (\n        clip: auto,\n        -webkit-clip-path: none,\n        clip-path: none,\n        height: auto,\n        margin: auto,\n        overflow: visible,\n        width: auto,\n        white-space: normal,\n      ),\n    ),\n    'sr-only': (\n      function: 'property-advanced',\n      class: sr-only,\n      property: (\n        border: 0,\n        clip: rect(1px, 1px, 1px, 1px),\n        -webkit-clip-path: inset(50%),\n        clip-path: inset(50%),\n        height: 1px,\n        margin: -1px,\n        overflow: hidden,\n        padding: 0,\n        position: absolute,\n        width: 1px,\n        white-space: nowrap,\n      ),\n    ),\n    'sticky-top': (\n      function: 'property-advanced',\n      class: sticky-top,\n      property: (\n        position: sticky,\n        top: 0,\n        z-index: var(--#{$prefix}z-1),\n      ),\n    ),\n    'sticky-bottom': (\n      function: 'property-advanced',\n      class: sticky-bottom,\n      property: (\n        position: sticky,\n        bottom: 0,\n        z-index: var(--#{$prefix}z-1),\n      ),\n    ),\n    'fixed-top': (\n      function: 'property-advanced',\n      class: fixed-top,\n      property: (\n        position: fixed,\n        top: 0,\n        right: 0,\n        left: 0,\n        z-index: var(--#{$prefix}z-1),\n      ),\n    ),\n    'fixed-bottom': (\n      function: 'property-advanced',\n      class: fixed-bottom,\n      property: (\n        position: fixed,\n        bottom: 0,\n        right: 0,\n        left: 0,\n        z-index: var(--#{$prefix}z-1, 999),\n      ),\n    ),\n    'position': (\n      property: position,\n      class: position,\n      values: static relative absolute fixed sticky,\n    ),\n    'top': (\n      property: top,\n      class: top,\n      values: $percentage-values,\n    ),\n    'to-fix': (\n      property: top,\n      class: top-f,\n      values: $fixed-values,\n    ),\n    'top-right': (\n      property: top right,\n      class: top-right,\n      values: $percentage-values,\n    ),\n    'top-right-fixed': (\n      property: top right,\n      class: top-right-f,\n      values: $fixed-values,\n    ),\n    'top-left': (\n      property: top left,\n      class: top-left,\n      values: $percentage-values,\n    ),\n    'top-left-fixed': (\n      property: top left,\n      class: top-left-f,\n      values: $fixed-values,\n    ),\n    'bottom': (\n      property: bottom,\n      class: bottom,\n      values: $percentage-values,\n    ),\n    'bottom-fixed': (\n      property: bottom-f,\n      class: bottom-f,\n      values: $fixed-values,\n    ),\n    'bottom-right': (\n      property: bottom right,\n      class: bottom-right,\n      values: $percentage-values,\n    ),\n    'bottom-right-fixed': (\n      property: bottom right,\n      class: bottom-right-f,\n      values: $fixed-values,\n    ),\n    'bottom-left': (\n      property: bottom left,\n      class: bottom-left,\n      values: $percentage-values,\n    ),\n    'bottom-left-fixed': (\n      property: bottom left,\n      class: bottom-left-f,\n      values: $fixed-values,\n    ),\n    'start': (\n      property: left,\n      class: start,\n      values: $percentage-values,\n    ),\n    'start-fixed': (\n      property: left,\n      class: start-f,\n      values: $fixed-values,\n    ),\n    'end': (\n      property: right,\n      class: end,\n      values: $percentage-values,\n    ),\n    'end-fixed': (\n      property: right,\n      class: end,\n      values: $fixed-values,\n    ),\n    'position-bot': (\n      property: bottom,\n      class: bot,\n      values: $percentage-values,\n    ),\n    'position-top': (\n      property: top,\n      class: top,\n      values: $percentage-values,\n    ),\n    'position-start': (\n      property: left,\n      class: start,\n      values: $percentage-values,\n    ),\n    'position-end': (\n      property: right,\n      class: end,\n      values: $percentage-values,\n    ),\n    'position-bot-fluid': (\n      function: 'fluid',\n      property: bottom,\n      class: bot,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n    ),\n    'position-bot-left-fluid': (\n      function: 'fluid',\n      property: bottom left,\n      class: bot-start,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n    ),\n    'position-bot-right-fluid': (\n      function: 'fluid',\n      property: bottom right,\n      class: bot-end,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n    ),\n    'position-top-fluid': (\n      function: 'fluid',\n      property: top,\n      class: top,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n    ),\n    'position-top-left-fluid': (\n      function: 'fluid',\n      property: top left,\n      class: top-start,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n    ),\n    'position-top-right-fluid': (\n      function: 'fluid',\n      property: top right,\n      class: top-end,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n    ),\n    'position-start-fluid': (\n      function: 'fluid',\n      property: left,\n      class: start,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n    ),\n    'position-end-fluid': (\n      function: 'fluid',\n      property: right,\n      class: end,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n    ),\n    'hover-opacity': (\n      state: ':hover',\n      property: opacity,\n      class: hover-opacity,\n      values: $decimal-percentage-values,\n    ),\n    'hover-scale': (\n      state: ':hover',\n      property: scale,\n      class: hover-scale,\n      values:\n        map.merge(\n          (\n            none: var(--scale-value),\n          ),\n          $decimal-percentage-values\n        ),\n    ),\n    'fill': (\n      function: 'custom-property-value',\n      property: fill,\n      class: fill,\n      custom-property-prefix:\n        if(meta.variable-exists(color-prefix), $color-prefix, null),\n      values:\n        if(\n          meta.variable-exists(selected-theme-hex-colors),\n          $selected-theme-hex-colors,\n          null\n        ),\n    ),\n    'background-colors-rgba-hover': (\n      state: ':hover',\n      property: background-color,\n      class: hover-bga,\n      custom-property-prefix:\n        if(meta.variable-exists(color-prefix), $color-prefix, null),\n      values:\n        if(\n          $enable-rgb-colors,\n          map-loop(\n            $selected-theme-rgb-colors,\n            rgba-css-var-advanced,\n            '$key',\n            null,\n            $hover-prefix\n          ),\n          null\n        ),\n    ),\n    'background-colors-hex-custom-property-hover': (\n      state: ':hover',\n      function: 'custom-property-value',\n      property: background-color,\n      class: hover-bg,\n      custom-property-prefix:\n        if(meta.variable-exists(color-prefix), $color-prefix, null),\n      values:\n        if(\n          meta.variable-exists(selected-theme-hex-colors),\n          $selected-theme-hex-colors,\n          null\n        ),\n    ),\n    'hover-background-colors-hex': (\n      property: background-color,\n      class: hover-bg,\n      state: ':hover',\n      values:\n        if(\n          map.has-key($color-theme, $selected-theme, hover),\n          map.get($color-theme, $selected-theme, hover),\n          null\n        ),\n    ),\n    'background-colors-alpha': (\n      property: background-color,\n      class: bga,\n      values:\n        if(\n          enable-rgb-colors,\n          map-loop(\n            $selected-theme-rgb-colors,\n            rgba-css-var-advanced,\n            '$key',\n            null,\n            $color-prefix\n          ),\n          null\n        ),\n    ),\n    'background-colors-hex-custom-property': (\n      function: 'custom-property-value',\n      property: background-color,\n      class: bg,\n      custom-property-prefix:\n        if(meta.variable-exists(color-prefix), $color-prefix, null),\n      values:\n        if(\n          meta.variable-exists(selected-theme-hex-colors),\n          $selected-theme-hex-colors,\n          null\n        ),\n    ),\n    'background-colors-hex': (\n      property: background-color,\n      class: bg-h,\n      values:\n        if(\n          meta.variable-exists(selected-theme-hex-colors),\n          $selected-theme-hex-colors,\n          null\n        ),\n    ),\n    'background-transparent': (\n      property: background-color,\n      class: bg,\n      values: transparent,\n    ),\n    'text-transparent': (\n      property: color,\n      class: text,\n      values: (\n        transparent: transparent,\n      ),\n    ),\n    'text-color-alpha': (\n      property: color,\n      class: texta,\n      // custom-property-prefix: if(meta.variable-exists(color-prefix), $color-prefix, null),\n      values:\n        if(\n          $enable-rgb-colors,\n          map-loop(\n            $selected-theme-rgb-colors,\n            rgba-css-var-advanced,\n            '$key',\n            null,\n            $color-prefix\n          ),\n          null\n        ),\n    ),\n    'text-color-hex-custom-properties': (\n      function: 'custom-property-value',\n      property: color,\n      class: text,\n      custom-property-prefix:\n        if(meta.variable-exists(color-prefix), $color-prefix, null),\n      values:\n        if(\n          meta.variable-exists(selected-theme-hex-colors),\n          $selected-theme-hex-colors,\n          null\n        ),\n    ),\n    'text-color-hex': (\n      property: color,\n      class: text-hex,\n      values:\n        if(\n          meta.variable-exists(selected-theme-hex-colors),\n          $selected-theme-hex-colors,\n          null\n        ),\n    ),\n    'text-color-hex-hover': (\n      property: color,\n      state: ':hover',\n      class: text-hover#{'-' + remove-substring($color-prefix, '-')},\n      values:\n        if(\n          map.has-key($color-theme, $selected-theme, hover),\n          map.get($color-theme, $selected-theme, hover),\n          null\n        ),\n    ),\n    'text-color-rgba-hover': (\n      property: color,\n      class: text-hover,\n      state: ':hover',\n      values:\n        if(\n          map.has-key($color-theme, $selected-theme, hover),\n          map-loop(\n            map.get($color-theme, $selected-theme, hover),\n            rgba-css-var-advanced,\n            '$key',\n            null,\n            $hover-prefix\n          ),\n          null\n        ),\n    ),\n    'font-size-fluid': (\n      function: 'fluid',\n      class: fs,\n      property: font-size,\n      values: if(meta.variable-exists(size-clamp), $size-clamp, null),\n      responsive: true,\n    ),\n    'margin-fluid': (\n      function: 'fluid',\n      class: m,\n      property: margin,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n      responsive: true,\n    ),\n    'margin-top-fluid': (\n      function: 'fluid',\n      class: mt,\n      property: margin-top,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n      responsive: true,\n    ),\n    'margin-bottom-fluid': (\n      function: 'fluid',\n      class: mb,\n      property: margin-bottom,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n      responsive: true,\n    ),\n    'margin-left-fluid': (\n      function: 'fluid',\n      class: ms,\n      property: margin-left,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n      responsive: true,\n    ),\n    'margin-right-fluid': (\n      function: 'fluid',\n      class: me,\n      property: margin-right,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n      responsive: true,\n    ),\n    'margin-block-fluid': (\n      function: 'fluid',\n      class: my,\n      property: margin-block,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n      responsive: true,\n    ),\n    'margin-inline-fluid': (\n      function: 'fluid',\n      class: mx,\n      property: margin-inline,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n      responsive: true,\n    ),\n    'padding-fluid': (\n      function: 'fluid',\n      class: p,\n      property: padding,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n      responsive: true,\n    ),\n    'padding-top-fluid': (\n      function: 'fluid',\n      class: pt,\n      property: padding-top,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n      responsive: true,\n    ),\n    'padding-bottom-fluid': (\n      function: 'fluid',\n      class: pb,\n      property: padding-bottom,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n      responsive: true,\n    ),\n    'padding-left-fluid': (\n      function: 'fluid',\n      class: ps,\n      property: padding-left,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n      responsive: true,\n    ),\n    'padding-right-fluid': (\n      function: 'fluid',\n      class: pe,\n      property: padding-right,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n      responsive: true,\n    ),\n    'padding-block-fluid': (\n      function: 'fluid',\n      class: py,\n      property: padding-block,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n      responsive: true,\n    ),\n    'padding-inline-fluid': (\n      function: 'fluid',\n      class: px,\n      property: padding-inline,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n      responsive: true,\n    ),\n    'gap-fluid': (\n      function: 'fluid',\n      responsive: true,\n      property: gap,\n      class: gap,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n    ),\n    'row-gap-fluid': (\n      function: 'fluid',\n      responsive: true,\n      property: row-gap,\n      class: row-gap,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n    ),\n    'column-gap-fluid': (\n      function: 'fluid',\n      responsive: true,\n      property: column-gap,\n      class: column-gap,\n      values: if(meta.variable-exists(spacing-clamp), $spacing-clamp, null),\n    ),\n    'gap': (\n      responsive: true,\n      property: gap,\n      class: gap,\n      values: map.merge($sizes-regular, $sizes-irregular),\n    ),\n    'row-gap': (\n      responsive: true,\n      property: row-gap,\n      class: row-gap,\n      values: map.merge($sizes-regular, $sizes-irregular),\n    ),\n    'column-gap': (\n      responsive: true,\n      property: column-gap,\n      class: column-gap,\n      values: map.merge($sizes-regular, $sizes-irregular),\n    ),\n    'margin': (\n      responsive: true,\n      property: margin,\n      class: m,\n      values:\n        map.merge(\n          map.merge($sizes-regular, $sizes-irregular),\n          (\n            auto: auto,\n          )\n        ),\n    ),\n    'margin-x': (\n      responsive: true,\n      property: margin-right margin-left,\n      class: mx,\n      values:\n        map.merge(\n          map.merge($sizes-regular, $sizes-irregular),\n          (\n            auto: auto,\n          )\n        ),\n    ),\n    'margin-y': (\n      responsive: true,\n      property: margin-top margin-bottom,\n      class: my,\n      values:\n        map.merge(\n          map.merge($sizes-regular, $sizes-irregular),\n          (\n            auto: auto,\n          )\n        ),\n    ),\n    'margin-top': (\n      responsive: true,\n      property: margin-top,\n      class: mt,\n      values:\n        map.merge(\n          map.merge($sizes-regular, $sizes-irregular),\n          (\n            auto: auto,\n          )\n        ),\n    ),\n    'margin-end': (\n      responsive: true,\n      property: margin-right,\n      class: me,\n      values:\n        map.merge(\n          map.merge($sizes-regular, $sizes-irregular),\n          (\n            auto: auto,\n          )\n        ),\n    ),\n    'margin-bottom': (\n      responsive: true,\n      property: margin-bottom,\n      class: mb,\n      values:\n        map.merge(\n          map.merge($sizes-regular, $sizes-irregular),\n          (\n            auto: auto,\n          )\n        ),\n    ),\n    'margin-start': (\n      responsive: true,\n      property: margin-left,\n      class: ms,\n      values:\n        map.merge(\n          map.merge($sizes-regular, $sizes-irregular),\n          (\n            auto: auto,\n          )\n        ),\n    ),\n    'negative-margin': (\n      responsive: true,\n      property: margin,\n      class: m,\n      values: map.merge($negative-spacers, $negative-spacers-irregular),\n    ),\n    'negative-margin-x': (\n      responsive: true,\n      property: margin-right margin-left,\n      class: mx,\n      values: map.merge($negative-spacers, $negative-spacers-irregular),\n    ),\n    'negative-margin-y': (\n      responsive: true,\n      property: margin-top margin-bottom,\n      class: my,\n      values: map.merge($negative-spacers, $negative-spacers-irregular),\n    ),\n    'negative-margin-top': (\n      responsive: true,\n      property: margin-top,\n      class: mt,\n      values: map.merge($negative-spacers, $negative-spacers-irregular),\n    ),\n    'negative-margin-end': (\n      responsive: true,\n      property: margin-right,\n      class: me,\n      values: map.merge($negative-spacers, $negative-spacers-irregular),\n    ),\n    'negative-margin-bottom': (\n      responsive: true,\n      property: margin-bottom,\n      class: mb,\n      values: map.merge($negative-spacers, $negative-spacers-irregular),\n    ),\n    'negative-margin-start': (\n      responsive: true,\n      property: margin-left,\n      class: ms,\n      values: map.merge($negative-spacers, $negative-spacers-irregular),\n    ),\n    'padding': (\n      responsive: true,\n      property: padding,\n      class: p,\n      values: map.merge($sizes-regular, $sizes-irregular),\n    ),\n    'padding-x-container': (\n      responsive: true,\n      property: padding-right padding-left,\n      class: px,\n      values: (\n        container: var(--container-padding),\n      ),\n    ),\n    'padding-x': (\n      responsive: true,\n      property: padding-right padding-left,\n      class: px,\n      values:\n        map.merge(\n          $sizes-regular,\n          map.merge(\n            $sizes-irregular,\n            (\n              container-gutter:\n                calc(\n                  (100vw - var(--container, 100vw)) / 2 +\n                    var(--container-padding)\n                ),\n            )\n          )\n        ),\n    ),\n    'padding-y': (\n      responsive: true,\n      property: padding-top padding-bottom,\n      class: py,\n      values: map.merge($sizes-regular, $sizes-irregular),\n    ),\n    'padding-top': (\n      responsive: true,\n      property: padding-top,\n      class: pt,\n      values: map.merge($sizes-regular, $sizes-irregular),\n    ),\n    'padding-end': (\n      responsive: true,\n      property: padding-right,\n      class: pe,\n      values: map.merge($sizes-regular, $sizes-irregular),\n    ),\n    'padding-bottom': (\n      responsive: true,\n      property: padding-bottom,\n      class: pb,\n      values: map.merge($sizes-regular, $sizes-irregular),\n    ),\n    'padding-start': (\n      responsive: true,\n      property: padding-left,\n      class: ps,\n      values: map.merge($sizes-regular, $sizes-irregular),\n    ),\n  ),\n  $utilities\n);\n"],"names":[],"sourceRoot":""}